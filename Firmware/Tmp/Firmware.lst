
Tmp/Firmware:     file format elf32-littlearm
Tmp/Firmware
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x0000131d memsz 0x0000131d flags r-x
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x0800131d align 2**12
         filesz 0x00000000 memsz 0x00004115 flags rw-
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000131d  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00004115  20000000  0800131d  00003000  2**2
                  ALLOC
  2 .debug_info   00002d2e  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_abbrev 00000b2a  00000000  00000000  0000504b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_loclists 00000a4a  00000000  00000000  00005b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 000000a0  00000000  00000000  000065bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   000016f4  00000000  00000000  0000665f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000e69  00000000  00000000  00007d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      00000026  00000000  00000000  00008bbc  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 00000032  00000000  00000000  00008be2  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000388  00000000  00000000  00008c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000040  00000000  00000000  00008f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 Startup.c
0800117c l     F .text	00000004 Default_Handler
08001190 l       .text	00000000 _MSP
00000000 l    df *ABS*	00000000 BUFF.c
20000010 l     O .bss	00004000 Buffer
20000000 l     O .bss	00000004 Free
20000004 l     O .bss	00000002 Head
20000008 l     O .bss	00000004 Used
2000000c l     O .bss	00000002 Tail
2000000e l     O .bss	00000002 Scan
00000000 l    df *ABS*	00000000 SDADC.c
20004010 l     O .bss	00000080 Buffer
20004090 l     O .bss	00000004 Samples
00000000 l    df *ABS*	00000000 Main.c
20004094 l     O .bss	00000002 Scans
20004096 l     O .bss	00000002 PulseLen
20004098 l     O .bss	00000002 RecoveryLen
2000409a l     O .bss	00000001 PreDelay
2000409b l     O .bss	00000001 PostDelay
2000409c l     O .bss	00000004 Samples
00000000 l    df *ABS*	00000000 USB.c
200040a0 l     O .bss	00000048 CtrReq
200040e8 l     O .bss	00000001 State
200040ec l     O .bss	00000020 Endpoint
2000410c l     O .bss	00000004 OnComplete
20004110 l     O .bss	00000004 DataPtr
20004114 l     O .bss	00000001 DataCount
080012f0 g     O .text	00000012 USB_Descriptor
0800023c g     F .text	00000010 BUFF_IncScan
0800110c g     F .text	00000070 USB_Init
20004115 g       .bss	00000000 BSS_END
08001180 g     F .text	0000001a HardFault_Handler
080004f8 g     F .text	0000002c USB_SetAddress
20000000 g       .bss	00000000 BSS_START
080003e0 g     F .text	00000014 SetTimes
08000460 g     F .text	00000098 Main
08000324 g     F .text	000000ac SDADC_Init
080012c4 g     O .text	0000000c StringVendor
08000814 g     F .text	000000f8 USB_ReadEP
20000000 g       .text	00000000 DATA_END
08000590 g     F .text	0000002e USB_IntToUnicode
080001c4 g     F .text	00000078 BUFF_FillPMA
080006e6 g     F .text	00000054 USB_ReadPMA
0800131d g       *ABS*	00000000 DATA_VALUES
08001270 g     F .text	00000050 HardFault_HandlerC
08000694 g     F .text	00000052 USB_WritePMA
08000524 g     F .text	00000054 USB_HandleEP1_TX
08000aac g     F .text	00000030 USB_DeconfigEP
0800024c g     F .text	00000018 BUFF_Init
08000f74 g     F .text	0000002c USB_HandleEP0
08000000 g     O .text	00000184 Vectors
08000438 g     F .text	00000028 TIM6Delay
080012d0 g     O .text	00000020 StringProduct
080002d8 g     F .text	0000004c SDADC_Capture
08000d60 g     F .text	00000028 USB_StallEP0
08000adc g     F .text	00000284 USB_HandleEP0_Process
20006000 g       .text	00000000 STACK_END
08000578 g     F .text	00000018 USB_IsAddressed
08000d88 g     F .text	0000009c USB_HandleEP0_TX
080012c0 g     O .text	00000004 StringLangID
08000e24 g     F .text	00000150 USB_HandleEP0_RX
08000fa0 g     F .text	0000016c USB_LP_ISR
08000184 g     F .text	00000040 BUFF_PushSample
080005be g     F .text	000000c2 USB_StallEP
08001304 g     O .text	00000019 USB_ConfigDescriptor
0800094a g     F .text	00000162 USB_ConfigEP
080003d0 g     F .text	00000010 Int2Hex
0800073a g     F .text	000000da USB_WriteEP
080003f4 g     F .text	00000014 SetDelays
08000408 g     F .text	00000014 SetSamples
20000000 g       .text	00000000 DATA_START
0800041c g     F .text	0000001c Capture
0800119a g     F .text	000000d6 Sys_Init
08000264 g     F .text	00000074 DMA2_CH3_ISR
0800090c g     F .text	0000003e USB_GetNextPMA
08000680 g     F .text	00000014 USB_RegisterEP



Disassembly of section .text:

08000000 <Vectors>:
 8000000:	00 60 00 20 9b 11 00 08 7d 11 00 08 81 11 00 08     .`. ....}.......
 8000010:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000020:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000030:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000040:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000050:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000060:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000070:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000080:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000090:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 80000a0:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 80000b0:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 80000c0:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 80000d0:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 80000e0:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 80000f0:	7d 11 00 08 7d 11 00 08 00 00 00 00 00 00 00 00     }...}...........
	...
 8000108:	7d 11 00 08 7d 11 00 08 00 00 00 00 00 00 00 00     }...}...........
 8000118:	7d 11 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     }...}...}...}...
 8000128:	65 02 00 08 7d 11 00 08 7d 11 00 08 7d 11 00 08     e...}...}...}...
 8000138:	7d 11 00 08 7d 11 00 08 7d 11 00 08 00 00 00 00     }...}...}.......
	...
 8000168:	7d 11 00 08 a1 0f 00 08 7d 11 00 08 00 00 00 00     }.......}.......
 8000178:	7d 11 00 08 00 00 00 00 7d 11 00 08                 }.......}...

08000184 <BUFF_PushSample>:
static uint32_t     Used;                                                       //Used buffer space
static uint16_t     Buffer[BUFFER_SIZE];                                        //Data buffer (as big as posible)
static uint16_t     Scan;                                                       //Current scan
// ---------------------------------------------------------------------------------------------------------------------
void BUFF_PushSample(const uint16_t value) {                                    //Add sample to buffer
  if(Free == 0) return;                                                         //If no free space return
 8000184:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <BUFF_PushSample+0x38>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	b1b2      	cbz	r2, 80001b8 <BUFF_PushSample+0x34>
void BUFF_PushSample(const uint16_t value) {                                    //Add sample to buffer
 800018a:	b410      	push	{r4}
  Buffer[Head] = value;                                                         //Otherwise, append to buffer
 800018c:	4619      	mov	r1, r3
 800018e:	889b      	ldrh	r3, [r3, #4]
 8000190:	4c0b      	ldr	r4, [pc, #44]	@ (80001c0 <BUFF_PushSample+0x3c>)
 8000192:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
  Free--;                                                                       //
 8000196:	3a01      	subs	r2, #1
 8000198:	600a      	str	r2, [r1, #0]
  Used++;                                                                       //
 800019a:	688a      	ldr	r2, [r1, #8]
 800019c:	3201      	adds	r2, #1
 800019e:	608a      	str	r2, [r1, #8]
  Head++;                                                                       //
 80001a0:	3301      	adds	r3, #1
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	808b      	strh	r3, [r1, #4]
  if(Head == BUFFER_SIZE) Head = 0;                                             //
 80001a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80001aa:	d002      	beq.n	80001b2 <BUFF_PushSample+0x2e>
}                                                                               //
 80001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80001b0:	4770      	bx	lr
  if(Head == BUFFER_SIZE) Head = 0;                                             //
 80001b2:	2200      	movs	r2, #0
 80001b4:	808a      	strh	r2, [r1, #4]
 80001b6:	e7f9      	b.n	80001ac <BUFF_PushSample+0x28>
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000010 	.word	0x20000010

080001c4 <BUFF_FillPMA>:
// ---------------------------------------------------------------------------------------------------------------------
void BUFF_FillPMA(uint32_t *buffer) {                                           //Build a transfer buffer and move to PMA
 80001c4:	b430      	push	{r4, r5}
  uint8_t Count = 0;                                                            //Init sended samples
  uint8_t Filled = 0;                                                           //Filled values
 80001c6:	2300      	movs	r3, #0
  uint8_t Count = 0;                                                            //Init sended samples
 80001c8:	469c      	mov	ip, r3
  while(Filled < 31) {                                                          //While space in buffer
 80001ca:	e005      	b.n	80001d8 <BUFF_FillPMA+0x14>
    *buffer++ = Buffer[Tail];                                                   //Place samples to fill block
    Used--;                                                                     //Update counters
    Free++;                                                                     //
    Tail++;                                                                     //
    if(Tail == BUFFER_SIZE) Tail = 0;                                           //
    Count++;                                                                    //
 80001cc:	f10c 0c01 	add.w	ip, ip, #1
 80001d0:	fa5f fc8c 	uxtb.w	ip, ip
    Filled++;                                                                   //
 80001d4:	3301      	adds	r3, #1
 80001d6:	b2db      	uxtb	r3, r3
  while(Filled < 31) {                                                          //While space in buffer
 80001d8:	2b1e      	cmp	r3, #30
 80001da:	d81d      	bhi.n	8000218 <BUFF_FillPMA+0x54>
    if(Used == 0) break;                                                        //If no more samples break
 80001dc:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <BUFF_FillPMA+0x70>)
 80001de:	6894      	ldr	r4, [r2, #8]
 80001e0:	b1d4      	cbz	r4, 8000218 <BUFF_FillPMA+0x54>
    *buffer++ = Buffer[Tail];                                                   //Place samples to fill block
 80001e2:	4611      	mov	r1, r2
 80001e4:	8992      	ldrh	r2, [r2, #12]
 80001e6:	4d14      	ldr	r5, [pc, #80]	@ (8000238 <BUFF_FillPMA+0x74>)
 80001e8:	f835 5012 	ldrh.w	r5, [r5, r2, lsl #1]
 80001ec:	f840 5b04 	str.w	r5, [r0], #4
    Used--;                                                                     //Update counters
 80001f0:	3c01      	subs	r4, #1
 80001f2:	608c      	str	r4, [r1, #8]
    Free++;                                                                     //
 80001f4:	680c      	ldr	r4, [r1, #0]
 80001f6:	3401      	adds	r4, #1
 80001f8:	600c      	str	r4, [r1, #0]
    Tail++;                                                                     //
 80001fa:	3201      	adds	r2, #1
 80001fc:	b292      	uxth	r2, r2
 80001fe:	818a      	strh	r2, [r1, #12]
    if(Tail == BUFFER_SIZE) Tail = 0;                                           //
 8000200:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000204:	d1e2      	bne.n	80001cc <BUFF_FillPMA+0x8>
 8000206:	460a      	mov	r2, r1
 8000208:	2100      	movs	r1, #0
 800020a:	8191      	strh	r1, [r2, #12]
 800020c:	e7de      	b.n	80001cc <BUFF_FillPMA+0x8>
  }                                                                             //
  while(Filled < 31) {                                                          //Fill rest of buffer
    *buffer++ = 0;                                                              //
 800020e:	2200      	movs	r2, #0
 8000210:	f840 2b04 	str.w	r2, [r0], #4
    Filled++;                                                                   //
 8000214:	3301      	adds	r3, #1
 8000216:	b2db      	uxtb	r3, r3
  while(Filled < 31) {                                                          //Fill rest of buffer
 8000218:	2b1e      	cmp	r3, #30
 800021a:	d9f8      	bls.n	800020e <BUFF_FillPMA+0x4a>
  }                                                                             //
  *buffer++ = ((Scan & 0x07FF) << 5) | (Count & 0x1F);                          //
 800021c:	4b05      	ldr	r3, [pc, #20]	@ (8000234 <BUFF_FillPMA+0x70>)
 800021e:	89db      	ldrh	r3, [r3, #14]
 8000220:	015b      	lsls	r3, r3, #5
 8000222:	b29b      	uxth	r3, r3
 8000224:	f00c 0c1f 	and.w	ip, ip, #31
 8000228:	ea43 030c 	orr.w	r3, r3, ip
 800022c:	6003      	str	r3, [r0, #0]
}                                                                               //
 800022e:	bc30      	pop	{r4, r5}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000
 8000238:	20000010 	.word	0x20000010

0800023c <BUFF_IncScan>:
// ---------------------------------------------------------------------------------------------------------------------
void BUFF_IncScan() {
  Scan++;
 800023c:	4a02      	ldr	r2, [pc, #8]	@ (8000248 <BUFF_IncScan+0xc>)
 800023e:	89d3      	ldrh	r3, [r2, #14]
 8000240:	3301      	adds	r3, #1
 8000242:	81d3      	strh	r3, [r2, #14]
}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000

0800024c <BUFF_Init>:
// ---------------------------------------------------------------------------------------------------------------------
void BUFF_Init() {                                                              //Initialize buffer
  Scan = 0;                                                                     //
 800024c:	4b04      	ldr	r3, [pc, #16]	@ (8000260 <BUFF_Init+0x14>)
 800024e:	2200      	movs	r2, #0
 8000250:	81da      	strh	r2, [r3, #14]
  Head = 0;                                                                     //Buffer head
 8000252:	809a      	strh	r2, [r3, #4]
  Tail = 0;                                                                     //Buffer tail
 8000254:	819a      	strh	r2, [r3, #12]
  Free = BUFFER_SIZE;                                                           //Free buffer space
 8000256:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800025a:	6019      	str	r1, [r3, #0]
  Used = 0;                                                                     //Used buffer space
 800025c:	609a      	str	r2, [r3, #8]
}                                                                               //
 800025e:	4770      	bx	lr
 8000260:	20000000 	.word	0x20000000

08000264 <DMA2_CH3_ISR>:
#include "Main.h"
// ---------------------------------------------------------------------------------------------------------------------
static uint16_t          Buffer[64];                                            //SDADC1 buffer
static volatile uint32_t Samples;                                               //Pending samples to capture
// ---------------------------------------------------------------------------------------------------------------------
void DMA2_CH3_ISR() {                                                           //Handle DMA interrupt
 8000264:	b538      	push	{r3, r4, r5, lr}
  uint16_t *Ptr;                                                                //
  if((DMA2->ISR & DMA_ISR_TCIF3) != 0) {                                        //Prepare Trasnfer complete
 8000266:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <DMA2_CH3_ISR+0x64>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800026e:	d012      	beq.n	8000296 <DMA2_CH3_ISR+0x32>
    DMA2->IFCR |= DMA_IFCR_CTCIF3;                                              //Interrupt clear
 8000270:	4a15      	ldr	r2, [pc, #84]	@ (80002c8 <DMA2_CH3_ISR+0x64>)
 8000272:	6853      	ldr	r3, [r2, #4]
 8000274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000278:	6053      	str	r3, [r2, #4]
    Ptr = &Buffer[0];                                                           //Init pointer
 800027a:	4c14      	ldr	r4, [pc, #80]	@ (80002cc <DMA2_CH3_ISR+0x68>)
  } else {                                                                      //Prepare half transfer
    DMA2->IFCR |= DMA_IFCR_CHTIF3;                                              //Interrupt clear
    Ptr = &Buffer[32];                                                          //Init pointer
  }                                                                             //
  if(Samples == 0) {                                                            //If no more samples
 800027c:	4b13      	ldr	r3, [pc, #76]	@ (80002cc <DMA2_CH3_ISR+0x68>)
 800027e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000282:	b9f3      	cbnz	r3, 80002c2 <DMA2_CH3_ISR+0x5e>
    SDADC1->CR2 &= ~SDADC_CR2_RCONT;                                            //Disable SDADC
 8000284:	4a12      	ldr	r2, [pc, #72]	@ (80002d0 <DMA2_CH3_ISR+0x6c>)
 8000286:	6853      	ldr	r3, [r2, #4]
 8000288:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800028c:	6053      	str	r3, [r2, #4]
    DMA2_Channel3->CCR = 0;                                                     //Reset DMA
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <DMA2_CH3_ISR+0x64>)
 8000290:	2200      	movs	r2, #0
 8000292:	631a      	str	r2, [r3, #48]	@ 0x30
  } else {                                                                      //
    for(uint8_t n = 0; n < 32; n++) BUFF_PushSample(*Ptr++);                    //Copy sample
    Samples = Samples - 32;                                                     //Decrement counter
  }                                                                             //
}                                                                               //
 8000294:	bd38      	pop	{r3, r4, r5, pc}
    DMA2->IFCR |= DMA_IFCR_CHTIF3;                                              //Interrupt clear
 8000296:	4a0c      	ldr	r2, [pc, #48]	@ (80002c8 <DMA2_CH3_ISR+0x64>)
 8000298:	6853      	ldr	r3, [r2, #4]
 800029a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029e:	6053      	str	r3, [r2, #4]
    Ptr = &Buffer[32];                                                          //Init pointer
 80002a0:	4c0c      	ldr	r4, [pc, #48]	@ (80002d4 <DMA2_CH3_ISR+0x70>)
 80002a2:	e7eb      	b.n	800027c <DMA2_CH3_ISR+0x18>
    for(uint8_t n = 0; n < 32; n++) BUFF_PushSample(*Ptr++);                    //Copy sample
 80002a4:	f834 0b02 	ldrh.w	r0, [r4], #2
 80002a8:	f7ff ff6c 	bl	8000184 <BUFF_PushSample>
 80002ac:	3501      	adds	r5, #1
 80002ae:	b2ed      	uxtb	r5, r5
 80002b0:	2d1f      	cmp	r5, #31
 80002b2:	d9f7      	bls.n	80002a4 <DMA2_CH3_ISR+0x40>
    Samples = Samples - 32;                                                     //Decrement counter
 80002b4:	4a05      	ldr	r2, [pc, #20]	@ (80002cc <DMA2_CH3_ISR+0x68>)
 80002b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80002ba:	3b20      	subs	r3, #32
 80002bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
}                                                                               //
 80002c0:	e7e8      	b.n	8000294 <DMA2_CH3_ISR+0x30>
    for(uint8_t n = 0; n < 32; n++) BUFF_PushSample(*Ptr++);                    //Copy sample
 80002c2:	2500      	movs	r5, #0
 80002c4:	e7f4      	b.n	80002b0 <DMA2_CH3_ISR+0x4c>
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400
 80002cc:	20004010 	.word	0x20004010
 80002d0:	40016000 	.word	0x40016000
 80002d4:	20004050 	.word	0x20004050

080002d8 <SDADC_Capture>:
void SDADC_Capture(const uint32_t samples) {                                    //Init capture
  Samples = samples & 0xFFFFFFE0;                                               //Round to 32
 80002d8:	f020 001f 	bic.w	r0, r0, #31
 80002dc:	490d      	ldr	r1, [pc, #52]	@ (8000314 <SDADC_Capture+0x3c>)
 80002de:	f8c1 0080 	str.w	r0, [r1, #128]	@ 0x80
  DMA2->IFCR |= DMA_IFCR_CTCIF3 | DMA_IFCR_CHTIF3;                              //Interrupt clear
 80002e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000318 <SDADC_Capture+0x40>)
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
 80002ea:	605a      	str	r2, [r3, #4]
  DMA2_Channel3->CPAR = (uint32_t)&SDADC1->RDATAR;                              //Initialize SDADC1 DMA controller
 80002ec:	4a0b      	ldr	r2, [pc, #44]	@ (800031c <SDADC_Capture+0x44>)
 80002ee:	639a      	str	r2, [r3, #56]	@ 0x38
  DMA2_Channel3->CMAR = (uint32_t)Buffer;                                       //
 80002f0:	63d9      	str	r1, [r3, #60]	@ 0x3c
  DMA2_Channel3->CNDTR = 64;                                                    //
 80002f2:	2240      	movs	r2, #64	@ 0x40
 80002f4:	635a      	str	r2, [r3, #52]	@ 0x34
  DMA2_Channel3->CCR = DMA_CCR_MSIZE_0|DMA_CCR_PSIZE_0|DMA_CCR_EN |             //
 80002f6:	f240 52a7 	movw	r2, #1447	@ 0x5a7
 80002fa:	631a      	str	r2, [r3, #48]	@ 0x30
                       DMA_CCR_CIRC|DMA_CCR_MINC|DMA_CCR_TCIE|DMA_CCR_HTIE;     //
  SDADC1->CR2 |= SDADC_CR2_RCONT | SDADC_CR2_RSWSTART;                          //Start conversion
 80002fc:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <SDADC_Capture+0x48>)
 80002fe:	6853      	ldr	r3, [r2, #4]
 8000300:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000304:	6053      	str	r3, [r2, #4]
  while(Samples != 0);                                                          //Wait for ADC to complete
 8000306:	4b03      	ldr	r3, [pc, #12]	@ (8000314 <SDADC_Capture+0x3c>)
 8000308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1fa      	bne.n	8000306 <SDADC_Capture+0x2e>
}                                                                               //
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20004010 	.word	0x20004010
 8000318:	40020400 	.word	0x40020400
 800031c:	40016064 	.word	0x40016064
 8000320:	40016000 	.word	0x40016000

08000324 <SDADC_Init>:
void SDADC_Init() {                                                             //Init ADCs capture
  RCC->AHBENR |=  RCC_AHBENR_DMA2EN  | RCC_AHBENR_GPIOEEN;                      //Enable used devices in AHB
 8000324:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <SDADC_Init+0x98>)
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800032c:	f042 0202 	orr.w	r2, r2, #2
 8000330:	615a      	str	r2, [r3, #20]
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;                                            //
 8000332:	69da      	ldr	r2, [r3, #28]
 8000334:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000338:	61da      	str	r2, [r3, #28]
  PWR->CR |= PWR_CR_SDADC1EN;                                                   //Enable SDADC power
 800033a:	4921      	ldr	r1, [pc, #132]	@ (80003c0 <SDADC_Init+0x9c>)
 800033c:	680a      	ldr	r2, [r1, #0]
 800033e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000342:	600a      	str	r2, [r1, #0]
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN | RCC_APB2ENR_SDADC1EN;                  //Enable OPAMPs and used timers
 8000344:	699a      	ldr	r2, [r3, #24]
 8000346:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800034a:	f042 0201 	orr.w	r2, r2, #1
 800034e:	619a      	str	r2, [r3, #24]
  GPIOE->MODER |= (0b11<<GPIO_MODER_MODER8_Pos)|(0b11<<GPIO_MODER_MODER9_Pos);  //PE8=AN, PE9=AN
 8000350:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <SDADC_Init+0xa0>)
 8000352:	6813      	ldr	r3, [r2, #0]
 8000354:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000358:	6013      	str	r3, [r2, #0]
  SDADC1->CR2 |= SDADC_CR2_ADON;                                                //Enable SDADC
 800035a:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <SDADC_Init+0xa4>)
 800035c:	6853      	ldr	r3, [r2, #4]
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6053      	str	r3, [r2, #4]
  while((SDADC1->ISR & SDADC_ISR_STABIP) != 0);                                 //Wait for stabilization
 8000364:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <SDADC_Init+0xa4>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800036c:	d1fa      	bne.n	8000364 <SDADC_Init+0x40>
  SDADC1->CR1 |= SDADC_CR1_INIT;                                                //Initialization
 800036e:	4a16      	ldr	r2, [pc, #88]	@ (80003c8 <SDADC_Init+0xa4>)
 8000370:	6813      	ldr	r3, [r2, #0]
 8000372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000376:	6013      	str	r3, [r2, #0]
  while((SDADC1->ISR & SDADC_ISR_INITRDY) == 0);                                //Wait initialization bit to be set
 8000378:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <SDADC_Init+0xa4>)
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	2b00      	cmp	r3, #0
 800037e:	dafb      	bge.n	8000378 <SDADC_Init+0x54>
  SDADC1->CR1 |= SDADC_CR1_RDMAEN;                                              //Enable DMA
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <SDADC_Init+0xa4>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000388:	601a      	str	r2, [r3, #0]
  SDADC1->CR2 |= SDADC_CR2_FAST | (0b1000 << SDADC_CR2_RCH_Pos);                //Config capture channel and mode
 800038a:	685a      	ldr	r2, [r3, #4]
 800038c:	f042 7284 	orr.w	r2, r2, #17301504	@ 0x1080000
 8000390:	605a      	str	r2, [r3, #4]
  SDADC1->CR1 &= ~SDADC_CR1_INIT;                                               //Exit initialization mode
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8000398:	601a      	str	r2, [r3, #0]
  SDADC1->CR2 |= SDADC_CR2_STARTCALIB;                                          //Start calibration
 800039a:	685a      	ldr	r2, [r3, #4]
 800039c:	f042 0210 	orr.w	r2, r2, #16
 80003a0:	605a      	str	r2, [r3, #4]
  while((SDADC1->ISR & SDADC_ISR_CALIBIP) != 0);                                //Wait calibration to finish
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <SDADC_Init+0xa4>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80003aa:	d1fa      	bne.n	80003a2 <SDADC_Init+0x7e>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	4b07      	ldr	r3, [pc, #28]	@ (80003cc <SDADC_Init+0xa8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	f883 233a 	strb.w	r2, [r3, #826]	@ 0x33a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80003b8:	605a      	str	r2, [r3, #4]
//  ADC1->CR |= ADC_CR_ADSTART;                                                   //Enable ADC1 and ADC2
//  ADC3->CR |= ADC_CR_ADSTART;                                                   //Enable ADC3 and ADC4



}                                                                               //
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40007000 	.word	0x40007000
 80003c4:	48001000 	.word	0x48001000
 80003c8:	40016000 	.word	0x40016000
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <Int2Hex>:
static          uint16_t RecoveryLen;
static          uint32_t Samples;
static volatile uint16_t Scans;
// ---------------------------------------------------------------------------------------------------------------------
uint8_t Int2Hex(const char ch) {                                                //Convert binary to hex character
  return (ch < 10) ? ch + '0' : 'A' + ch - 10;                                  //
 80003d0:	2809      	cmp	r0, #9
 80003d2:	d802      	bhi.n	80003da <Int2Hex+0xa>
 80003d4:	3030      	adds	r0, #48	@ 0x30
 80003d6:	b2c0      	uxtb	r0, r0
 80003d8:	4770      	bx	lr
 80003da:	3037      	adds	r0, #55	@ 0x37
 80003dc:	b2c0      	uxtb	r0, r0
}                                                                               //
 80003de:	4770      	bx	lr

080003e0 <SetTimes>:
// --------------------------------------------------------------------------------------------------------------------
void SetTimes(const uint16_t pulse, const uint16_t recovery) {
  if(Scans != 0) return;
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <SetTimes+0x10>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b913      	cbnz	r3, 80003ee <SetTimes+0xe>
  PulseLen = pulse;
 80003e8:	4b01      	ldr	r3, [pc, #4]	@ (80003f0 <SetTimes+0x10>)
 80003ea:	8058      	strh	r0, [r3, #2]
  RecoveryLen = recovery;
 80003ec:	8099      	strh	r1, [r3, #4]
}
 80003ee:	4770      	bx	lr
 80003f0:	20004094 	.word	0x20004094

080003f4 <SetDelays>:
void SetDelays(const uint16_t predelay, const uint16_t posdelay) {
  if(Scans != 0) return;
 80003f4:	4b03      	ldr	r3, [pc, #12]	@ (8000404 <SetDelays+0x10>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	b913      	cbnz	r3, 8000402 <SetDelays+0xe>
  PreDelay = predelay;
 80003fc:	4b01      	ldr	r3, [pc, #4]	@ (8000404 <SetDelays+0x10>)
 80003fe:	7198      	strb	r0, [r3, #6]
  PostDelay = posdelay;
 8000400:	71d9      	strb	r1, [r3, #7]
}
 8000402:	4770      	bx	lr
 8000404:	20004094 	.word	0x20004094

08000408 <SetSamples>:
void SetSamples(const uint32_t samples) {
  if(Scans != 0) return;
 8000408:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <SetSamples+0x10>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	b29b      	uxth	r3, r3
 800040e:	b90b      	cbnz	r3, 8000414 <SetSamples+0xc>
  Samples = samples;
 8000410:	4b01      	ldr	r3, [pc, #4]	@ (8000418 <SetSamples+0x10>)
 8000412:	6098      	str	r0, [r3, #8]
}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20004094 	.word	0x20004094

0800041c <Capture>:
void Capture(const uint16_t scans) {
  if(Scans != 0) return;
 800041c:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <Capture+0x18>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	b29b      	uxth	r3, r3
 8000422:	b103      	cbz	r3, 8000426 <Capture+0xa>
 8000424:	4770      	bx	lr
void Capture(const uint16_t scans) {
 8000426:	b510      	push	{r4, lr}
 8000428:	4604      	mov	r4, r0
  BUFF_Init();                                                              //Clear buffer
 800042a:	f7ff ff0f 	bl	800024c <BUFF_Init>
  Scans = scans;
 800042e:	4b01      	ldr	r3, [pc, #4]	@ (8000434 <Capture+0x18>)
 8000430:	801c      	strh	r4, [r3, #0]
}
 8000432:	bd10      	pop	{r4, pc}
 8000434:	20004094 	.word	0x20004094

08000438 <TIM6Delay>:
// --------------------------------------------------------------------------------------------------------------------
void TIM6Delay(const uint16_t ms) {                                             //Basic delay
  TIM6->CNT = 0;                                                                //reset count
 8000438:	4b08      	ldr	r3, [pc, #32]	@ (800045c <TIM6Delay+0x24>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM6->ARR = ms << 1;                                                          //
 800043e:	0040      	lsls	r0, r0, #1
 8000440:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIM6->CR1 = TIM_CR1_OPM | TIM_CR1_CEN;                                        //Start timer
 8000442:	2209      	movs	r2, #9
 8000444:	601a      	str	r2, [r3, #0]
  while ((TIM6->CR1 & TIM_CR1_CEN) != 0);                                         //Wait
 8000446:	4b05      	ldr	r3, [pc, #20]	@ (800045c <TIM6Delay+0x24>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f013 0f01 	tst.w	r3, #1
 800044e:	d1fa      	bne.n	8000446 <TIM6Delay+0xe>
  TIM6->SR &= ~TIM_SR_UIF;                                                      //Clear interrupt
 8000450:	4a02      	ldr	r2, [pc, #8]	@ (800045c <TIM6Delay+0x24>)
 8000452:	6913      	ldr	r3, [r2, #16]
 8000454:	f023 0301 	bic.w	r3, r3, #1
 8000458:	6113      	str	r3, [r2, #16]
}                                                                               //
 800045a:	4770      	bx	lr
 800045c:	40001000 	.word	0x40001000

08000460 <Main>:
// --------------------------------------------------------------------------------------------------------------------
void Main() {                                                                   //Entry point
 8000460:	b508      	push	{r3, lr}
  RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;                                           //Enable used periperals
 8000462:	4b22      	ldr	r3, [pc, #136]	@ (80004ec <Main+0x8c>)
 8000464:	69da      	ldr	r2, [r3, #28]
 8000466:	f042 0210 	orr.w	r2, r2, #16
 800046a:	61da      	str	r2, [r3, #28]
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;                                            //
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000472:	615a      	str	r2, [r3, #20]
  GPIOA->MODER |= (0b01<<GPIO_MODER_MODER2_Pos)|(0b01<<GPIO_MODER_MODER3_Pos);  //Configure ports
 8000474:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000478:	6813      	ldr	r3, [r2, #0]
 800047a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800047e:	6013      	str	r3, [r2, #0]
  TIM6->PSC = (AHB_CLK / 2000) - 1;                                             //Tim 6 prescaler (0.5ms ticks)
 8000480:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <Main+0x90>)
 8000482:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000486:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM6Delay(200);
 8000488:	20c8      	movs	r0, #200	@ 0xc8
 800048a:	f7ff ffd5 	bl	8000438 <TIM6Delay>
  BUFF_Init();                                                                  //Init buffer
 800048e:	f7ff fedd 	bl	800024c <BUFF_Init>
  SDADC_Init();                                                                 //Init ADC
 8000492:	f7ff ff47 	bl	8000324 <SDADC_Init>
  USB_Init();                                                                   //Init USB
 8000496:	f000 fe39 	bl	800110c <USB_Init>
  while(true) {                                                                 //repeat forever
    if(Scans != 0) {                                                            //If pending scans
 800049a:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <Main+0x94>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0fa      	beq.n	800049a <Main+0x3a>
      GPIOA->BSRR = GPIO_BSRR_BS_3;                                             //Enable polarize coil
 80004a4:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
 80004a8:	2308      	movs	r3, #8
 80004aa:	61ab      	str	r3, [r5, #24]
      TIM6Delay(PulseLen);                                                      //Wait
 80004ac:	4c11      	ldr	r4, [pc, #68]	@ (80004f4 <Main+0x94>)
 80004ae:	8860      	ldrh	r0, [r4, #2]
 80004b0:	f7ff ffc2 	bl	8000438 <TIM6Delay>
      GPIOA->BSRR = GPIO_BSRR_BR_3;                                             //Disable polarize coil
 80004b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80004b8:	61ab      	str	r3, [r5, #24]
      TIM6Delay(PreDelay);                                                      //Wait
 80004ba:	79a0      	ldrb	r0, [r4, #6]
 80004bc:	f7ff ffbc 	bl	8000438 <TIM6Delay>
      GPIOA->BSRR = GPIO_BSRR_BS_2;                                             //Enable relay
 80004c0:	2304      	movs	r3, #4
 80004c2:	61ab      	str	r3, [r5, #24]
      TIM6Delay(PostDelay);                                                     //Wait
 80004c4:	79e0      	ldrb	r0, [r4, #7]
 80004c6:	f7ff ffb7 	bl	8000438 <TIM6Delay>
      SDADC_Capture(Samples);                                                   //Start capture
 80004ca:	68a0      	ldr	r0, [r4, #8]
 80004cc:	f7ff ff04 	bl	80002d8 <SDADC_Capture>
      GPIOA->BSRR = GPIO_BSRR_BR_2;                                             //Disable relay
 80004d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80004d4:	61ab      	str	r3, [r5, #24]
      TIM6Delay(RecoveryLen);                                                   //Wait
 80004d6:	88a0      	ldrh	r0, [r4, #4]
 80004d8:	f7ff ffae 	bl	8000438 <TIM6Delay>
      Scans--;                                                                  //
 80004dc:	8823      	ldrh	r3, [r4, #0]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	3b01      	subs	r3, #1
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	8023      	strh	r3, [r4, #0]
      BUFF_IncScan();                                                           //Move to next scan
 80004e6:	f7ff fea9 	bl	800023c <BUFF_IncScan>
 80004ea:	e7d6      	b.n	800049a <Main+0x3a>
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40001000 	.word	0x40001000
 80004f4:	20004094 	.word	0x20004094

080004f8 <USB_SetAddress>:
void USB_RegisterEP(uint8_t ep, USB_Event_Callback_t callback) {                //Set endpoint event callback
  Endpoint[ep & 0x07] = callback;                                               //
}                                                                               //
// ---------------------------------------------------------------------------------------------------------------------
void USB_SetAddress() {                                                         //Set device address
  USB->DADDR = USB_DADDR_EF | CtrReq.Value;                                     //
 80004f8:	4a08      	ldr	r2, [pc, #32]	@ (800051c <USB_SetAddress+0x24>)
 80004fa:	8853      	ldrh	r3, [r2, #2]
 80004fc:	f043 0080 	orr.w	r0, r3, #128	@ 0x80
 8000500:	4907      	ldr	r1, [pc, #28]	@ (8000520 <USB_SetAddress+0x28>)
 8000502:	f8a1 004c 	strh.w	r0, [r1, #76]	@ 0x4c
  State.Device = (CtrReq.Value) ? USB_STATE_ADDRESSED : USB_STATE_DEFAULT;      //
 8000506:	3b00      	subs	r3, #0
 8000508:	bf18      	it	ne
 800050a:	2301      	movne	r3, #1
 800050c:	f892 1048 	ldrb.w	r1, [r2, #72]	@ 0x48
 8000510:	f363 1187 	bfi	r1, r3, #6, #2
 8000514:	f882 1048 	strb.w	r1, [r2, #72]	@ 0x48
}                                                                               //
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	200040a0 	.word	0x200040a0
 8000520:	40005c00 	.word	0x40005c00

08000524 <USB_HandleEP1_TX>:
  if(event != USB_EVENT_TX) return;                                             //
 8000524:	bb08      	cbnz	r0, 800056a <USB_HandleEP1_TX+0x46>
void USB_HandleEP1_TX(uint8_t event) {                                          //Handle data sending
 8000526:	b510      	push	{r4, lr}
  PMA_Record_t *Reg  = (EPR[1] & USB_EP_DTOG_RX) ? &EPT[1].RX : &EPT[1].TX;     //Select buffer to write
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <USB_HandleEP1_TX+0x48>)
 800052a:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	@ 0xc04
 800052e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000532:	d018      	beq.n	8000566 <USB_HandleEP1_TX+0x42>
 8000534:	4c0e      	ldr	r4, [pc, #56]	@ (8000570 <USB_HandleEP1_TX+0x4c>)
  uint32_t     *Dest = (uint32_t*)(USB_PMAADDR + 2 * Reg->Addr);                //
 8000536:	6820      	ldr	r0, [r4, #0]
 8000538:	f100 5000 	add.w	r0, r0, #536870912	@ 0x20000000
 800053c:	f500 5040 	add.w	r0, r0, #12288	@ 0x3000
  BUFF_FillPMA(Dest);                                                           //Fill buffer
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	f7ff fe3f 	bl	80001c4 <BUFF_FillPMA>
  Reg->Size = 64;                                                               //Transfer size
 8000546:	2340      	movs	r3, #64	@ 0x40
 8000548:	6063      	str	r3, [r4, #4]
  EPR[1] = (EPR[1] & USB_EPREG_MASK) | USB_EP_DTOG_RX;                          //Enable buffer
 800054a:	4a08      	ldr	r2, [pc, #32]	@ (800056c <USB_HandleEP1_TX+0x48>)
 800054c:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
 8000550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	0c1b      	lsrs	r3, r3, #16
 800055c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000560:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
}                                                                               //
 8000564:	bd10      	pop	{r4, pc}
  PMA_Record_t *Reg  = (EPR[1] & USB_EP_DTOG_RX) ? &EPT[1].RX : &EPT[1].TX;     //Select buffer to write
 8000566:	4c03      	ldr	r4, [pc, #12]	@ (8000574 <USB_HandleEP1_TX+0x50>)
 8000568:	e7e5      	b.n	8000536 <USB_HandleEP1_TX+0x12>
 800056a:	4770      	bx	lr
 800056c:	40005000 	.word	0x40005000
 8000570:	40006018 	.word	0x40006018
 8000574:	40006010 	.word	0x40006010

08000578 <USB_IsAddressed>:
  __NOP();
 8000578:	bf00      	nop
  return (Tmp->Device != USB_STATE_DEFAULT) ? 1 : 0;                            //
 800057a:	4b04      	ldr	r3, [pc, #16]	@ (800058c <USB_IsAddressed+0x14>)
 800057c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000580:	099b      	lsrs	r3, r3, #6
}                                                                               //
 8000582:	bf14      	ite	ne
 8000584:	2001      	movne	r0, #1
 8000586:	2000      	moveq	r0, #0
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200040a0 	.word	0x200040a0

08000590 <USB_IntToUnicode>:
void USB_IntToUnicode(uint32_t value, uint8_t *pbuf) {                          //Format serial number to buffer
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	4606      	mov	r6, r0
 8000594:	460d      	mov	r5, r1
  for(uint8_t i = 0; i < 8; i++) {                                              //
 8000596:	2400      	movs	r4, #0
 8000598:	e00e      	b.n	80005b8 <USB_IntToUnicode+0x28>
    *(pbuf++) = Int2Hex((value >> (4 * i))& 0x0F);                              //
 800059a:	00a0      	lsls	r0, r4, #2
 800059c:	fa26 f000 	lsr.w	r0, r6, r0
 80005a0:	f000 000f 	and.w	r0, r0, #15
 80005a4:	f7ff ff14 	bl	80003d0 <Int2Hex>
 80005a8:	462b      	mov	r3, r5
 80005aa:	f803 0b02 	strb.w	r0, [r3], #2
    *(pbuf++) = 0;                                                              //
 80005ae:	2200      	movs	r2, #0
 80005b0:	706a      	strb	r2, [r5, #1]
  for(uint8_t i = 0; i < 8; i++) {                                              //
 80005b2:	3401      	adds	r4, #1
 80005b4:	b2e4      	uxtb	r4, r4
    *(pbuf++) = 0;                                                              //
 80005b6:	461d      	mov	r5, r3
  for(uint8_t i = 0; i < 8; i++) {                                              //
 80005b8:	2c07      	cmp	r4, #7
 80005ba:	d9ee      	bls.n	800059a <USB_IntToUnicode+0xa>
}                                                                               //
 80005bc:	bd70      	pop	{r4, r5, r6, pc}

080005be <USB_StallEP>:
  uint8_t EP = ep & 0x07;                                                       //
 80005be:	f000 0307 	and.w	r3, r0, #7
  if(USB_EP_ISOCHRONOUS == (EPR[EP] & USB_EP_T_FIELD)) return;                  //ignore ISOCHRONOUS endpoints
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80005c8:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 80005d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80005d6:	d049      	beq.n	800066c <USB_StallEP+0xae>
  if(ep & USB_EPDIR_OUT) {                                                      //IN endpoint
 80005d8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80005dc:	d110      	bne.n	8000600 <USB_StallEP+0x42>
    if(USB_EP_RX_DIS == (EPR[EP] & USB_EPRX_STAT)) return;                      //DISABLED endpoint can't be stalled or unstalled
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	f412 5f40 	tst.w	r2, #12288	@ 0x3000
 80005e4:	d042      	beq.n	800066c <USB_StallEP+0xae>
    if(stall) {                                                                 //
 80005e6:	2900      	cmp	r1, #0
 80005e8:	d032      	beq.n	8000650 <USB_StallEP+0x92>
      EPR[EP] = (EPR[EP] ^ USB_EP_RX_STALL) & (USB_EPREG_MASK | USB_EPRX_STAT); //
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	f482 5280 	eor.w	r2, r2, #4096	@ 0x1000
 80005f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80005f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80005f8:	0412      	lsls	r2, r2, #16
 80005fa:	0c12      	lsrs	r2, r2, #16
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	4770      	bx	lr
    if(USB_EP_TX_DIS == (EPR[EP] & USB_EPTX_STAT)) return;                      //DISABLED endpoint can't be stalled or unstalled
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	f012 0f30 	tst.w	r2, #48	@ 0x30
 8000606:	d031      	beq.n	800066c <USB_StallEP+0xae>
    if(stall) {                                                                 //
 8000608:	b151      	cbz	r1, 8000620 <USB_StallEP+0x62>
      EPR[EP] = (EPR[EP] ^ USB_EP_TX_STALL) & (USB_EPREG_MASK | USB_EPTX_STAT); //
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	f082 0210 	eor.w	r2, r2, #16
 8000610:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8000614:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000618:	0412      	lsls	r2, r2, #16
 800061a:	0c12      	lsrs	r2, r2, #16
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	4770      	bx	lr
      if((USB_EP_KIND|USB_EP_BULK) == (EPR[EP]&(USB_EP_T_FIELD|USB_EP_KIND))) { //doublebuffered endpoint
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8000626:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800062a:	d008      	beq.n	800063e <USB_StallEP+0x80>
        EPR[EP] = (EPR[EP] ^ USB_EP_TX_NAK) &                                   //
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f082 0220 	eor.w	r2, r2, #32
 8000632:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8000636:	0412      	lsls	r2, r2, #16
 8000638:	0c12      	lsrs	r2, r2, #16
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	4770      	bx	lr
        EPR[EP] = (EPR[EP] ^ USB_EP_TX_VALID) &                                 //set endpoint to VALID and clear DTOG_TX & SWBUF_TX
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	f082 0230 	eor.w	r2, r2, #48	@ 0x30
 8000644:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000648:	0412      	lsls	r2, r2, #16
 800064a:	0c12      	lsrs	r2, r2, #16
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	4770      	bx	lr
      if((USB_EP_KIND|USB_EP_BULK) == (EPR[EP]&(USB_EP_T_FIELD|USB_EP_KIND))) { //doublebuffered endpoint
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8000656:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800065a:	d008      	beq.n	800066e <USB_StallEP+0xb0>
        EPR[EP] = (EPR[EP] ^ USB_EP_RX_VALID) &                                 //set endpoint to VALID and clear DTOG_RX
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8000662:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000666:	0412      	lsls	r2, r2, #16
 8000668:	0c12      	lsrs	r2, r2, #16
 800066a:	601a      	str	r2, [r3, #0]
}                                                                               //
 800066c:	4770      	bx	lr
        EPR[EP] = (EPR[EP] ^ (USB_EP_RX_VALID | USB_EP_DTOG_TX)) &              //set endpoint to VALID, clear DTOG_RX, set SWBUF_RX
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	f482 5241 	eor.w	r2, r2, #12352	@ 0x3040
 8000674:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8000678:	0412      	lsls	r2, r2, #16
 800067a:	0c12      	lsrs	r2, r2, #16
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	4770      	bx	lr

08000680 <USB_RegisterEP>:
  Endpoint[ep & 0x07] = callback;                                               //
 8000680:	f000 0007 	and.w	r0, r0, #7
 8000684:	4b02      	ldr	r3, [pc, #8]	@ (8000690 <USB_RegisterEP+0x10>)
 8000686:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800068a:	64d9      	str	r1, [r3, #76]	@ 0x4c
}                                                                               //
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	200040a0 	.word	0x200040a0

08000694 <USB_WritePMA>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_WritePMA(uint8_t *buf, uint16_t blen, PMA_Record_t *tx) {              //Write buffer to PMA
  uint32_t *Dest = (uint32_t*)(USB_PMAADDR + 2 * tx->Addr);                     //
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	f103 5c00 	add.w	ip, r3, #536870912	@ 0x20000000
 800069a:	f50c 5c40 	add.w	ip, ip, #12288	@ 0x3000
 800069e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  tx->Size = blen;                                                              //
 80006a2:	6051      	str	r1, [r2, #4]
  for(uint16_t n = 0, Word = 0; n < blen; n++, buf++) {                         //
 80006a4:	2200      	movs	r2, #0
 80006a6:	4613      	mov	r3, r2
 80006a8:	428a      	cmp	r2, r1
 80006aa:	d21b      	bcs.n	80006e4 <USB_WritePMA+0x50>
void USB_WritePMA(uint8_t *buf, uint16_t blen, PMA_Record_t *tx) {              //Write buffer to PMA
 80006ac:	b510      	push	{r4, lr}
 80006ae:	e007      	b.n	80006c0 <USB_WritePMA+0x2c>
    Word |= (*buf) << ((n & 0x01) ? 8 : 0);                                     //
    if((n & 0x01) || ((n + 1) == blen)) {                                       //
      *Dest++ = Word;                                                           //
 80006b0:	f84c 2b04 	str.w	r2, [ip], #4
      Word = 0;                                                                 //
 80006b4:	2200      	movs	r2, #0
  for(uint16_t n = 0, Word = 0; n < blen; n++, buf++) {                         //
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3001      	adds	r0, #1
 80006bc:	428b      	cmp	r3, r1
 80006be:	d210      	bcs.n	80006e2 <USB_WritePMA+0x4e>
    Word |= (*buf) << ((n & 0x01) ? 8 : 0);                                     //
 80006c0:	f890 e000 	ldrb.w	lr, [r0]
 80006c4:	00dc      	lsls	r4, r3, #3
 80006c6:	f004 0408 	and.w	r4, r4, #8
 80006ca:	fa0e fe04 	lsl.w	lr, lr, r4
 80006ce:	ea42 020e 	orr.w	r2, r2, lr
 80006d2:	b292      	uxth	r2, r2
    if((n & 0x01) || ((n + 1) == blen)) {                                       //
 80006d4:	f013 0f01 	tst.w	r3, #1
 80006d8:	d1ea      	bne.n	80006b0 <USB_WritePMA+0x1c>
 80006da:	1c5c      	adds	r4, r3, #1
 80006dc:	428c      	cmp	r4, r1
 80006de:	d1ea      	bne.n	80006b6 <USB_WritePMA+0x22>
 80006e0:	e7e6      	b.n	80006b0 <USB_WritePMA+0x1c>
    }                                                                           //
  }                                                                             //
}                                                                               //
 80006e2:	bd10      	pop	{r4, pc}
 80006e4:	4770      	bx	lr

080006e6 <USB_ReadPMA>:
// ---------------------------------------------------------------------------------------------------------------------
uint16_t USB_ReadPMA(uint8_t *buf, uint16_t blen, PMA_Record_t *rx) {           //Fill buffer from PMA
 80006e6:	b500      	push	{lr}
 80006e8:	4684      	mov	ip, r0
 80006ea:	4610      	mov	r0, r2
  uint32_t *Src =  (uint32_t*)(USB_PMAADDR + 2 * rx->Addr);                     //
 80006ec:	6813      	ldr	r3, [r2, #0]
 80006ee:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80006f2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80006f6:	005a      	lsls	r2, r3, #1
  blen = ((rx->Size & 0x03FF) < blen) ? (rx->Size & 0x03FF) : blen;             //
 80006f8:	6843      	ldr	r3, [r0, #4]
 80006fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006fe:	4299      	cmp	r1, r3
 8000700:	bf28      	it	cs
 8000702:	4619      	movcs	r1, r3
 8000704:	4608      	mov	r0, r1
  for(uint16_t n = 0, Word = 0; n < blen; n++, buf++) {                         //
 8000706:	f04f 0e00 	mov.w	lr, #0
 800070a:	4673      	mov	r3, lr
 800070c:	e009      	b.n	8000722 <USB_ReadPMA+0x3c>
    if(n & 0x01) {                                                              //
      *buf = Word >> 8;                                                         //
    } else {                                                                    //
      Word = *Src++;                                                            //
 800070e:	f852 1b04 	ldr.w	r1, [r2], #4
 8000712:	fa1f fe81 	uxth.w	lr, r1
      *buf = Word & 0xFF;                                                       //
 8000716:	f88c 1000 	strb.w	r1, [ip]
  for(uint16_t n = 0, Word = 0; n < blen; n++, buf++) {                         //
 800071a:	3301      	adds	r3, #1
 800071c:	b29b      	uxth	r3, r3
 800071e:	f10c 0c01 	add.w	ip, ip, #1
 8000722:	4283      	cmp	r3, r0
 8000724:	d207      	bcs.n	8000736 <USB_ReadPMA+0x50>
    if(n & 0x01) {                                                              //
 8000726:	f013 0f01 	tst.w	r3, #1
 800072a:	d0f0      	beq.n	800070e <USB_ReadPMA+0x28>
      *buf = Word >> 8;                                                         //
 800072c:	ea4f 211e 	mov.w	r1, lr, lsr #8
 8000730:	f88c 1000 	strb.w	r1, [ip]
 8000734:	e7f1      	b.n	800071a <USB_ReadPMA+0x34>
    }                                                                           //
  }                                                                             //
  return blen;                                                                  //
}                                                                               //
 8000736:	f85d fb04 	ldr.w	pc, [sp], #4

0800073a <USB_WriteEP>:
// ---------------------------------------------------------------------------------------------------------------------
int16_t USB_WriteEP(uint8_t ep, uint8_t *buf, uint16_t blen) {                  //Send data on endpoint
 800073a:	b538      	push	{r3, r4, r5, lr}
 800073c:	4684      	mov	ip, r0
 800073e:	4608      	mov	r0, r1
 8000740:	4615      	mov	r5, r2
  uint8_t EP = ep & 0x07;                                                       //
 8000742:	f00c 0207 	and.w	r2, ip, #7
  switch(EPR[EP] & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 8000746:	0094      	lsls	r4, r2, #2
 8000748:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800074c:	f504 44b8 	add.w	r4, r4, #23552	@ 0x5c00
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	f403 63e6 	and.w	r3, r3, #1840	@ 0x730
 8000756:	f5b3 7f08 	cmp.w	r3, #544	@ 0x220
 800075a:	d02f      	beq.n	80007bc <USB_WriteEP+0x82>
 800075c:	d81d      	bhi.n	800079a <USB_WriteEP+0x60>
 800075e:	2b20      	cmp	r3, #32
 8000760:	d02c      	beq.n	80007bc <USB_WriteEP+0x82>
 8000762:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8000766:	d115      	bne.n	8000794 <USB_WriteEP+0x5a>
    case (USB_EP_TX_NAK | USB_EP_BULK | USB_EP_KIND) :                          //doublebuffered bulk endpoint
      if(EPR[EP] & USB_EP_DTOG_RX) {                                            //
 8000768:	6823      	ldr	r3, [r4, #0]
 800076a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800076e:	d03b      	beq.n	80007e8 <USB_WriteEP+0xae>
        USB_WritePMA(buf, blen, &(EPT[EP].RX));                                 //
 8000770:	0113      	lsls	r3, r2, #4
 8000772:	4a27      	ldr	r2, [pc, #156]	@ (8000810 <USB_WriteEP+0xd6>)
 8000774:	441a      	add	r2, r3
 8000776:	4629      	mov	r1, r5
 8000778:	f7ff ff8c 	bl	8000694 <USB_WritePMA>
      } else {                                                                  //
        USB_WritePMA(buf, blen, &(EPT[ep].TX));                                 //
      }                                                                         //
      EPR[EP] = (EPR[EP] & USB_EPREG_MASK) | USB_EP_DTOG_RX;                    //
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000786:	041b      	lsls	r3, r3, #16
 8000788:	0c1b      	lsrs	r3, r3, #16
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6023      	str	r3, [r4, #0]
      EPR[EP] = (EPR[EP] ^ USB_EP_TX_VALID) & (USB_EPREG_MASK | USB_EPTX_STAT); //
      break;                                                                    //
    default :                                                                   //invalid or not ready
      return -1;                                                                //
  }                                                                             //
  return blen;                                                                  //
 8000790:	b228      	sxth	r0, r5
}                                                                               //
 8000792:	bd38      	pop	{r3, r4, r5, pc}
  switch(EPR[EP] & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 8000794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000798:	e7fb      	b.n	8000792 <USB_WriteEP+0x58>
 800079a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800079e:	d10a      	bne.n	80007b6 <USB_WriteEP+0x7c>
      if((EPR[EP] & USB_EP_DTOG_TX) == 0) {                                     //
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80007a6:	d129      	bne.n	80007fc <USB_WriteEP+0xc2>
        USB_WritePMA(buf, blen, &(EPT[EP].RX));                                 //
 80007a8:	0113      	lsls	r3, r2, #4
 80007aa:	4a19      	ldr	r2, [pc, #100]	@ (8000810 <USB_WriteEP+0xd6>)
 80007ac:	441a      	add	r2, r3
 80007ae:	4629      	mov	r1, r5
 80007b0:	f7ff ff70 	bl	8000694 <USB_WritePMA>
 80007b4:	e7ec      	b.n	8000790 <USB_WriteEP+0x56>
  switch(EPR[EP] & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 80007b6:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 80007ba:	d112      	bne.n	80007e2 <USB_WriteEP+0xa8>
      USB_WritePMA(buf, blen, &(EPT[EP].TX));                                   //
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80007c2:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 80007c6:	4629      	mov	r1, r5
 80007c8:	f7ff ff64 	bl	8000694 <USB_WritePMA>
      EPR[EP] = (EPR[EP] ^ USB_EP_TX_VALID) & (USB_EPREG_MASK | USB_EPTX_STAT); //
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80007d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80007d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007da:	041b      	lsls	r3, r3, #16
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	6023      	str	r3, [r4, #0]
      break;                                                                    //
 80007e0:	e7d6      	b.n	8000790 <USB_WriteEP+0x56>
  switch(EPR[EP] & (USB_EPTX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 80007e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e6:	e7d4      	b.n	8000792 <USB_WriteEP+0x58>
        USB_WritePMA(buf, blen, &(EPT[ep].TX));                                 //
 80007e8:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80007ec:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80007f0:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 80007f4:	4629      	mov	r1, r5
 80007f6:	f7ff ff4d 	bl	8000694 <USB_WritePMA>
 80007fa:	e7bf      	b.n	800077c <USB_WriteEP+0x42>
        USB_WritePMA(buf, blen, &(EPT[ep].TX));                                 //
 80007fc:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8000800:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8000804:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 8000808:	4629      	mov	r1, r5
 800080a:	f7ff ff43 	bl	8000694 <USB_WritePMA>
 800080e:	e7bf      	b.n	8000790 <USB_WriteEP+0x56>
 8000810:	40006008 	.word	0x40006008

08000814 <USB_ReadEP>:
// ---------------------------------------------------------------------------------------------------------------------
int16_t USB_ReadEP(uint8_t ep, uint8_t *buf, uint16_t blen) {                   //Read data from endpoint
 8000814:	b510      	push	{r4, lr}
 8000816:	468e      	mov	lr, r1
 8000818:	4611      	mov	r1, r2
  int32_t Read = 0;                                                             //
  uint8_t EP = ep & 0x07;                                                       //
 800081a:	f000 0c07 	and.w	ip, r0, #7
  switch(EPR[EP] & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 800081e:	ea4f 048c 	mov.w	r4, ip, lsl #2
 8000822:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8000826:	f504 44b8 	add.w	r4, r4, #23552	@ 0x5c00
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	f403 535c 	and.w	r3, r3, #14080	@ 0x3700
 8000830:	f5b3 5f44 	cmp.w	r3, #12544	@ 0x3100
 8000834:	d032      	beq.n	800089c <USB_ReadEP+0x88>
 8000836:	d81e      	bhi.n	8000876 <USB_ReadEP+0x62>
 8000838:	f5b3 5f08 	cmp.w	r3, #8704	@ 0x2200
 800083c:	d002      	beq.n	8000844 <USB_ReadEP+0x30>
 800083e:	f5b3 5f18 	cmp.w	r3, #9728	@ 0x2600
 8000842:	d112      	bne.n	800086a <USB_ReadEP+0x56>
        return USB_ReadPMA(buf, blen, &(EPT[EP].TX));                           //
      }                                                                         //
    case (USB_EP_RX_NAK | USB_EP_BULK) :                                        //regular endpoint
    case (USB_EP_RX_NAK | USB_EP_CONTROL) :                                     //
    case (USB_EP_RX_NAK | USB_EP_INTERRUPT) :                                   //
      Read = USB_ReadPMA(buf, blen, &(EPT[EP].RX));                             //
 8000844:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000848:	4a2f      	ldr	r2, [pc, #188]	@ (8000908 <USB_ReadEP+0xf4>)
 800084a:	4462      	add	r2, ip
 800084c:	4670      	mov	r0, lr
 800084e:	f7ff ff4a 	bl	80006e6 <USB_ReadPMA>
      EPR[EP] = (EPR[EP] ^ USB_EP_RX_VALID) & (USB_EPREG_MASK | USB_EPRX_STAT); //setting endpoint to VALID state
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8000858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800085c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000860:	041b      	lsls	r3, r3, #16
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	6023      	str	r3, [r4, #0]
      return Read;                                                              //
 8000866:	b200      	sxth	r0, r0
 8000868:	e004      	b.n	8000874 <USB_ReadEP+0x60>
  switch(EPR[EP] & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800086e:	d0e9      	beq.n	8000844 <USB_ReadEP+0x30>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    default:                                                                    //invalid or not ready
      return -1;                                                                //
  }                                                                             //
}                                                                               //
 8000874:	bd10      	pop	{r4, pc}
  switch(EPR[EP] & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 8000876:	f5b3 5f50 	cmp.w	r3, #13312	@ 0x3400
 800087a:	d10c      	bne.n	8000896 <USB_ReadEP+0x82>
      if(EPR[EP] & USB_EP_DTOG_RX) {                                            //
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000882:	d035      	beq.n	80008f0 <USB_ReadEP+0xdc>
        return USB_ReadPMA(buf, blen, &(EPT[EP].RX));                           //
 8000884:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000888:	4a1f      	ldr	r2, [pc, #124]	@ (8000908 <USB_ReadEP+0xf4>)
 800088a:	4462      	add	r2, ip
 800088c:	4670      	mov	r0, lr
 800088e:	f7ff ff2a 	bl	80006e6 <USB_ReadPMA>
 8000892:	b200      	sxth	r0, r0
 8000894:	e7ee      	b.n	8000874 <USB_ReadEP+0x60>
  switch(EPR[EP] & (USB_EPRX_STAT | USB_EP_T_FIELD | USB_EP_KIND)) {            //
 8000896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800089a:	e7eb      	b.n	8000874 <USB_ReadEP+0x60>
      switch(EPR[EP] & (USB_EP_DTOG_RX | USB_EP_DTOG_TX)) {                     //switching SWBUF if EP is NAKED
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	f244 0240 	movw	r2, #16448	@ 0x4040
 80008a2:	4013      	ands	r3, r2
 80008a4:	d00e      	beq.n	80008c4 <USB_ReadEP+0xb0>
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d00c      	beq.n	80008c4 <USB_ReadEP+0xb0>
      if(EPR[EP] & USB_EP_DTOG_TX) {                                            //
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80008b0:	d013      	beq.n	80008da <USB_ReadEP+0xc6>
        return USB_ReadPMA(buf, blen, &(EPT[EP].RX));                           //
 80008b2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80008b6:	4a14      	ldr	r2, [pc, #80]	@ (8000908 <USB_ReadEP+0xf4>)
 80008b8:	4462      	add	r2, ip
 80008ba:	4670      	mov	r0, lr
 80008bc:	f7ff ff13 	bl	80006e6 <USB_ReadPMA>
 80008c0:	b200      	sxth	r0, r0
 80008c2:	e7d7      	b.n	8000874 <USB_ReadEP+0x60>
          EPR[EP] = (EPR[EP] & USB_EPREG_MASK) | USB_EP_DTOG_TX;                //
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80008ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d6:	6023      	str	r3, [r4, #0]
          break;                                                                //
 80008d8:	e7e7      	b.n	80008aa <USB_ReadEP+0x96>
        return USB_ReadPMA(buf, blen, &(EPT[EP].TX));                           //
 80008da:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80008de:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80008e2:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 80008e6:	4670      	mov	r0, lr
 80008e8:	f7ff fefd 	bl	80006e6 <USB_ReadPMA>
 80008ec:	b200      	sxth	r0, r0
 80008ee:	e7c1      	b.n	8000874 <USB_ReadEP+0x60>
        return USB_ReadPMA(buf, blen, &(EPT[EP].TX));                           //
 80008f0:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80008f4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80008f8:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 80008fc:	4670      	mov	r0, lr
 80008fe:	f7ff fef2 	bl	80006e6 <USB_ReadPMA>
 8000902:	b200      	sxth	r0, r0
 8000904:	e7b6      	b.n	8000874 <USB_ReadEP+0x60>
 8000906:	bf00      	nop
 8000908:	40006008 	.word	0x40006008

0800090c <USB_GetNextPMA>:
// ---------------------------------------------------------------------------------------------------------------------
uint16_t USB_GetNextPMA(const uint16_t sz) {                                    //Get PMA address for new endpoints
  uint16_t Addr = 0x0200;                                                       //PMA block size
  for(uint8_t i = 0; i < 8; i++) {                                              //
 800090c:	2200      	movs	r2, #0
  uint16_t Addr = 0x0200;                                                       //PMA block size
 800090e:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  for(uint8_t i = 0; i < 8; i++) {                                              //
 8000912:	e007      	b.n	8000924 <USB_GetNextPMA+0x18>
    if((EPT[i].RX.Addr) && (EPT[i].RX.Addr < Addr)) Addr = EPT[i].RX.Addr;      //
    if((EPT[i].TX.Addr) && (EPT[i].TX.Addr < Addr)) Addr = EPT[i].TX.Addr;      //
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	b11b      	cbz	r3, 8000920 <USB_GetNextPMA+0x14>
 8000918:	4563      	cmp	r3, ip
 800091a:	d201      	bcs.n	8000920 <USB_GetNextPMA+0x14>
 800091c:	fa1f fc83 	uxth.w	ip, r3
  for(uint8_t i = 0; i < 8; i++) {                                              //
 8000920:	3201      	adds	r2, #1
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	2a07      	cmp	r2, #7
 8000926:	d80c      	bhi.n	8000942 <USB_GetNextPMA+0x36>
    if((EPT[i].RX.Addr) && (EPT[i].RX.Addr < Addr)) Addr = EPT[i].RX.Addr;      //
 8000928:	0113      	lsls	r3, r2, #4
 800092a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800092e:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8000932:	6899      	ldr	r1, [r3, #8]
 8000934:	2900      	cmp	r1, #0
 8000936:	d0ed      	beq.n	8000914 <USB_GetNextPMA+0x8>
 8000938:	4561      	cmp	r1, ip
 800093a:	d2eb      	bcs.n	8000914 <USB_GetNextPMA+0x8>
 800093c:	fa1f fc81 	uxth.w	ip, r1
 8000940:	e7e8      	b.n	8000914 <USB_GetNextPMA+0x8>
  }                                                                             //
  return Addr - sz;                                                             //
 8000942:	ebac 0000 	sub.w	r0, ip, r0
}                                                                               //
 8000946:	b280      	uxth	r0, r0
 8000948:	4770      	bx	lr

0800094a <USB_ConfigEP>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_ConfigEP(uint8_t ep, uint8_t type, uint16_t size) {                    //Configure endpoint
 800094a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t EP = (ep & 0x07);                                                     //
 800094e:	f000 0507 	and.w	r5, r0, #7
  if(type == USB_EPTYPE_CONTROL) {                                              //Set type and number
 8000952:	460f      	mov	r7, r1
 8000954:	2900      	cmp	r1, #0
 8000956:	d15a      	bne.n	8000a0e <USB_ConfigEP+0xc4>
    EPR[EP] = USB_EP_CONTROL | EP;                                              //
 8000958:	00ab      	lsls	r3, r5, #2
 800095a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800095e:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000962:	f445 7100 	orr.w	r1, r5, #512	@ 0x200
 8000966:	6019      	str	r1, [r3, #0]
  } else if(type == (USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF)) {                    //
    EPR[EP] = USB_EP_BULK | USB_EP_KIND | EP;                                   //
  } else {                                                                      //
    EPR[EP] = USB_EP_INTERRUPT | EP;                                            //
  }                                                                             //
  size = (~0x01U) & (size + 1);                                                 //Force 2-byte aligned size
 8000968:	1c54      	adds	r4, r2, #1
 800096a:	b2a4      	uxth	r4, r4
 800096c:	f024 0401 	bic.w	r4, r4, #1
 8000970:	b2a4      	uxth	r4, r4
  if(((ep & USB_EPDIR_OUT) != 0) || (type == USB_EPTYPE_CONTROL)) {             //Set IN endpoints address
 8000972:	b246      	sxtb	r6, r0
 8000974:	2e00      	cmp	r6, #0
 8000976:	db00      	blt.n	800097a <USB_ConfigEP+0x30>
 8000978:	b9e7      	cbnz	r7, 80009b4 <USB_ConfigEP+0x6a>
    EPT[EP].TX.Addr = USB_GetNextPMA(size);                                     //
 800097a:	4620      	mov	r0, r4
 800097c:	f7ff ffc6 	bl	800090c <USB_GetNextPMA>
 8000980:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8000984:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 8000988:	f508 48c0 	add.w	r8, r8, #24576	@ 0x6000
 800098c:	f8c8 0000 	str.w	r0, [r8]
    EPT[EP].TX.Size  = 0;                                                       //
 8000990:	2300      	movs	r3, #0
 8000992:	f8c8 3004 	str.w	r3, [r8, #4]
    if(type == (USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF)) {                         //
 8000996:	2f06      	cmp	r7, #6
 8000998:	d056      	beq.n	8000a48 <USB_ConfigEP+0xfe>
      EPT[EP].RX.Addr = USB_GetNextPMA(size);                                   //
      EPT[EP].RX.Size  = 0;                                                     //
      EPR[EP] = (EPR[EP] ^ USB_EP_TX_VALID) &                                   //
           (USB_EPREG_MASK | USB_EPTX_STAT | USB_EP_DTOG_TX | USB_EP_DTOG_RX);  //
    } else {                                                                    //
      EPR[EP] = (EPR[EP] ^ USB_EP_TX_NAK) &                                     //
 800099a:	00ab      	lsls	r3, r5, #2
 800099c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80009a0:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	f082 0220 	eor.w	r2, r2, #32
 80009aa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80009ae:	0412      	lsls	r2, r2, #16
 80009b0:	0c12      	lsrs	r2, r2, #16
 80009b2:	601a      	str	r2, [r3, #0]
           (USB_EPREG_MASK | USB_EPTX_STAT | USB_EP_DTOG_TX);                   //
    }                                                                           //
  }                                                                             //
  if((ep & USB_EPDIR_OUT) == 0) {                                               //Set OUT endpoints address
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	db28      	blt.n	8000a0a <USB_ConfigEP+0xc0>
    if(size > 62) {                                                             //
 80009b8:	2c3e      	cmp	r4, #62	@ 0x3e
 80009ba:	d95b      	bls.n	8000a74 <USB_ConfigEP+0x12a>
      size = (~0x1FU) & (size + 0x1FU);                                         //On larger than 62bytes force 32-byte aligned address
 80009bc:	f104 031f 	add.w	r3, r4, #31
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f023 031f 	bic.w	r3, r3, #31
 80009c6:	b29c      	uxth	r4, r3
      EPT[EP].RX.Size = 0x8000U - 0x400U + (size << 5);                         //
 80009c8:	015b      	lsls	r3, r3, #5
 80009ca:	012a      	lsls	r2, r5, #4
 80009cc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80009d0:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 80009d4:	f503 43f8 	add.w	r3, r3, #31744	@ 0x7c00
 80009d8:	60d3      	str	r3, [r2, #12]
    } else {                                                                    //
      EPT[EP].RX.Size = size << 9;                                              //
    }                                                                           //
    EPT[EP].RX.Addr = USB_GetNextPMA(size);                                     //
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff ff96 	bl	800090c <USB_GetNextPMA>
 80009e0:	012e      	lsls	r6, r5, #4
 80009e2:	f106 4680 	add.w	r6, r6, #1073741824	@ 0x40000000
 80009e6:	f506 46c0 	add.w	r6, r6, #24576	@ 0x6000
 80009ea:	60b0      	str	r0, [r6, #8]
    if((type == (USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF))) {                       //
 80009ec:	2f06      	cmp	r7, #6
 80009ee:	d049      	beq.n	8000a84 <USB_ConfigEP+0x13a>
      EPT[EP].TX.Addr = USB_GetNextPMA(size);                                   //
      EPT[EP].TX.Size  = EPT[EP].RX.Size;                                       //
      EPR[EP] = (EPR[EP] ^ (USB_EP_RX_VALID | USB_EP_DTOG_TX)) &                //
           (USB_EPREG_MASK | USB_EPRX_STAT | USB_EP_DTOG_RX | USB_EP_DTOG_TX);  //
    } else {                                                                    //
      EPR[EP] = (EPR[EP] ^ USB_EP_RX_VALID) &                                   //
 80009f0:	00ab      	lsls	r3, r5, #2
 80009f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80009f6:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8000a00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8000a04:	0412      	lsls	r2, r2, #16
 8000a06:	0c12      	lsrs	r2, r2, #16
 8000a08:	601a      	str	r2, [r3, #0]
           (USB_EPREG_MASK | USB_EPRX_STAT | USB_EP_DTOG_RX);                   //
    }                                                                           //
  }                                                                             //
}                                                                               //
 8000a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if(type == USB_EPTYPE_BULK) {                                          //
 8000a0e:	2902      	cmp	r1, #2
 8000a10:	d00a      	beq.n	8000a28 <USB_ConfigEP+0xde>
  } else if(type == (USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF)) {                    //
 8000a12:	2906      	cmp	r1, #6
 8000a14:	d00f      	beq.n	8000a36 <USB_ConfigEP+0xec>
    EPR[EP] = USB_EP_INTERRUPT | EP;                                            //
 8000a16:	00ab      	lsls	r3, r5, #2
 8000a18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a1c:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000a20:	f445 61c0 	orr.w	r1, r5, #1536	@ 0x600
 8000a24:	6019      	str	r1, [r3, #0]
 8000a26:	e79f      	b.n	8000968 <USB_ConfigEP+0x1e>
    EPR[EP] = USB_EP_BULK | EP;                                                 //
 8000a28:	00ab      	lsls	r3, r5, #2
 8000a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a2e:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000a32:	601d      	str	r5, [r3, #0]
 8000a34:	e798      	b.n	8000968 <USB_ConfigEP+0x1e>
    EPR[EP] = USB_EP_BULK | USB_EP_KIND | EP;                                   //
 8000a36:	00ab      	lsls	r3, r5, #2
 8000a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a3c:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000a40:	f445 7180 	orr.w	r1, r5, #256	@ 0x100
 8000a44:	6019      	str	r1, [r3, #0]
 8000a46:	e78f      	b.n	8000968 <USB_ConfigEP+0x1e>
      EPT[EP].RX.Addr = USB_GetNextPMA(size);                                   //
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f7ff ff5f 	bl	800090c <USB_GetNextPMA>
 8000a4e:	f8c8 0008 	str.w	r0, [r8, #8]
      EPT[EP].RX.Size  = 0;                                                     //
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c8 300c 	str.w	r3, [r8, #12]
      EPR[EP] = (EPR[EP] ^ USB_EP_TX_VALID) &                                   //
 8000a58:	00ab      	lsls	r3, r5, #2
 8000a5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a5e:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	f082 0230 	eor.w	r2, r2, #48	@ 0x30
 8000a68:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000a6c:	0412      	lsls	r2, r2, #16
 8000a6e:	0c12      	lsrs	r2, r2, #16
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e79f      	b.n	80009b4 <USB_ConfigEP+0x6a>
      EPT[EP].RX.Size = size << 9;                                              //
 8000a74:	012b      	lsls	r3, r5, #4
 8000a76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a7a:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8000a7e:	0262      	lsls	r2, r4, #9
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	e7aa      	b.n	80009da <USB_ConfigEP+0x90>
      EPT[EP].TX.Addr = USB_GetNextPMA(size);                                   //
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff ff41 	bl	800090c <USB_GetNextPMA>
 8000a8a:	6030      	str	r0, [r6, #0]
      EPT[EP].TX.Size  = EPT[EP].RX.Size;                                       //
 8000a8c:	68f3      	ldr	r3, [r6, #12]
 8000a8e:	6073      	str	r3, [r6, #4]
      EPR[EP] = (EPR[EP] ^ (USB_EP_RX_VALID | USB_EP_DTOG_TX)) &                //
 8000a90:	00ab      	lsls	r3, r5, #2
 8000a92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000a96:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	f482 5241 	eor.w	r2, r2, #12352	@ 0x3040
 8000aa0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8000aa4:	0412      	lsls	r2, r2, #16
 8000aa6:	0c12      	lsrs	r2, r2, #16
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	e7ae      	b.n	8000a0a <USB_ConfigEP+0xc0>

08000aac <USB_DeconfigEP>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_DeconfigEP(const uint8_t ep) {                                         //Deconfigure endpoint
  uint8_t EP = ep & 0x07;                                                       //
 8000aac:	f000 0007 	and.w	r0, r0, #7
  EPR[EP] &= ~USB_EPREG_MASK;                                                   //
 8000ab0:	0083      	lsls	r3, r0, #2
 8000ab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ab6:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	f422 420f 	bic.w	r2, r2, #36608	@ 0x8f00
 8000ac0:	f022 028f 	bic.w	r2, r2, #143	@ 0x8f
 8000ac4:	601a      	str	r2, [r3, #0]
  EPT[EP].RX.Addr = 0;                                                          //
 8000ac6:	0100      	lsls	r0, r0, #4
 8000ac8:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 8000acc:	f500 40c0 	add.w	r0, r0, #24576	@ 0x6000
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	6083      	str	r3, [r0, #8]
  EPT[EP].RX.Size = 0;                                                          //
 8000ad4:	60c3      	str	r3, [r0, #12]
  EPT[EP].TX.Addr = 0;                                                          //
 8000ad6:	6003      	str	r3, [r0, #0]
  EPT[EP].TX.Size = 0;                                                          //
 8000ad8:	6043      	str	r3, [r0, #4]
}                                                                               //
 8000ada:	4770      	bx	lr

08000adc <USB_HandleEP0_Process>:
// ---------------------------------------------------------------------------------------------------------------------
uint8_t USB_HandleEP0_Process() {                                               //Handle EP0 requests
 8000adc:	b570      	push	{r4, r5, r6, lr}
  uint8_t Type = CtrReq.Type & (USB_REQ_TYPE | USB_REQ_RECIPIENT);              //
 8000ade:	4b97      	ldr	r3, [pc, #604]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000ae0:	781c      	ldrb	r4, [r3, #0]
  if(Type == (USB_REQ_STANDARD | USB_REQ_DEVICE)) {                             //
 8000ae2:	f014 0463 	ands.w	r4, r4, #99	@ 0x63
 8000ae6:	f040 80b2 	bne.w	8000c4e <USB_HandleEP0_Process+0x172>
    if(CtrReq.Request == USB_STD_GET_STATUS) {                                  //Standard-Device-GetStatus request
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	b13b      	cbz	r3, 8000afe <USB_HandleEP0_Process+0x22>
      CtrReq.Data[0] = 0;                                                       //
      CtrReq.Data[1] = 0;                                                       //
      return USB_ACK;                                                           //
    } else if(CtrReq.Request == USB_STD_GET_CONFIG) {                           //Standard-Device-GetConfig request
 8000aee:	3b05      	subs	r3, #5
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d809      	bhi.n	8000b08 <USB_HandleEP0_Process+0x2c>
 8000af4:	e8df f003 	tbb	[pc, r3]
 8000af8:	0a081712 	.word	0x0a081712
 8000afc:	6c          	.byte	0x6c
 8000afd:	00          	.byte	0x00
      CtrReq.Data[0] = 0;                                                       //
 8000afe:	4b8f      	ldr	r3, [pc, #572]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	721a      	strb	r2, [r3, #8]
      CtrReq.Data[1] = 0;                                                       //
 8000b04:	725a      	strb	r2, [r3, #9]
      return USB_ACK;                                                           //
 8000b06:	2401      	movs	r4, #1
      return USB_FAIL;                                                          //If command not implemented
    }                                                                           //
    return USB_ACK;                                                             //
  }                                                                             //
  return USB_FAIL;                                                              //
}                                                                               //
 8000b08:	4620      	mov	r0, r4
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
      CtrReq.Data[0] = State.Config;                                            //
 8000b0c:	4a8b      	ldr	r2, [pc, #556]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b0e:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8000b12:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000b16:	7213      	strb	r3, [r2, #8]
      return USB_ACK;                                                           //
 8000b18:	2401      	movs	r4, #1
 8000b1a:	e7f5      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      OnComplete = USB_SetAddress;                                              //
 8000b1c:	4b87      	ldr	r3, [pc, #540]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b1e:	4a88      	ldr	r2, [pc, #544]	@ (8000d40 <USB_HandleEP0_Process+0x264>)
 8000b20:	66da      	str	r2, [r3, #108]	@ 0x6c
      return USB_ACK;                                                           //
 8000b22:	2401      	movs	r4, #1
 8000b24:	e7f0      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      if((CtrReq.Value >> 8) == USB_DTYPE_STRING) {                             //
 8000b26:	4b85      	ldr	r3, [pc, #532]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b28:	885b      	ldrh	r3, [r3, #2]
 8000b2a:	0a1a      	lsrs	r2, r3, #8
 8000b2c:	2a03      	cmp	r2, #3
 8000b2e:	d00b      	beq.n	8000b48 <USB_HandleEP0_Process+0x6c>
      } else if((CtrReq.Value >> 8) == USB_DTYPE_DEVICE) {                      //
 8000b30:	2a01      	cmp	r2, #1
 8000b32:	d045      	beq.n	8000bc0 <USB_HandleEP0_Process+0xe4>
      } else if ((CtrReq.Value >> 8) == USB_DTYPE_CONFIGURATION) {              //
 8000b34:	2a02      	cmp	r2, #2
 8000b36:	d1e7      	bne.n	8000b08 <USB_HandleEP0_Process+0x2c>
        DataPtr = (uint8_t*)USB_ConfigDescriptor;                               //
 8000b38:	4b80      	ldr	r3, [pc, #512]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b3a:	4a82      	ldr	r2, [pc, #520]	@ (8000d44 <USB_HandleEP0_Process+0x268>)
 8000b3c:	671a      	str	r2, [r3, #112]	@ 0x70
        DataCount = sizeof(USB_ConfigDescriptor);                               //
 8000b3e:	2219      	movs	r2, #25
 8000b40:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        return USB_ACK;                                                         //
 8000b44:	2401      	movs	r4, #1
 8000b46:	e7df      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
        if((CtrReq.Value & 0xFF) == 0x00) {                                     //
 8000b48:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8000b4c:	d020      	beq.n	8000b90 <USB_HandleEP0_Process+0xb4>
        } else if ((CtrReq.Value & 0xFF) == 0x01) {                             //
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d026      	beq.n	8000ba0 <USB_HandleEP0_Process+0xc4>
        } else if ((CtrReq.Value & 0xFF) == 0x02) {                             //
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d02c      	beq.n	8000bb0 <USB_HandleEP0_Process+0xd4>
        } else if ((CtrReq.Value & 0xFF) == 0x03) {                             //
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d1d6      	bne.n	8000b08 <USB_HandleEP0_Process+0x2c>
          dsc[0] = 50;                                                          //
 8000b5a:	4c78      	ldr	r4, [pc, #480]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b5c:	2632      	movs	r6, #50	@ 0x32
 8000b5e:	7226      	strb	r6, [r4, #8]
          dsc[1] = USB_DTYPE_STRING;                                            //
 8000b60:	7263      	strb	r3, [r4, #9]
          USB_IntToUnicode(((uint32_t*)UID_BASE)[0], &dsc[2]);                  //
 8000b62:	4d79      	ldr	r5, [pc, #484]	@ (8000d48 <USB_HandleEP0_Process+0x26c>)
 8000b64:	f104 010a 	add.w	r1, r4, #10
 8000b68:	f8d5 07ac 	ldr.w	r0, [r5, #1964]	@ 0x7ac
 8000b6c:	f7ff fd10 	bl	8000590 <USB_IntToUnicode>
          USB_IntToUnicode(((uint32_t*)UID_BASE)[1], &dsc[18]);                 //
 8000b70:	f104 011a 	add.w	r1, r4, #26
 8000b74:	f8d5 07b0 	ldr.w	r0, [r5, #1968]	@ 0x7b0
 8000b78:	f7ff fd0a 	bl	8000590 <USB_IntToUnicode>
          USB_IntToUnicode(((uint32_t*)UID_BASE)[2], &dsc[34]);                 //
 8000b7c:	f104 012a 	add.w	r1, r4, #42	@ 0x2a
 8000b80:	f8d5 07b4 	ldr.w	r0, [r5, #1972]	@ 0x7b4
 8000b84:	f7ff fd04 	bl	8000590 <USB_IntToUnicode>
          DataCount = 50;                                                       //
 8000b88:	f884 6074 	strb.w	r6, [r4, #116]	@ 0x74
          return USB_ACK;                                                       //
 8000b8c:	2401      	movs	r4, #1
 8000b8e:	e7bb      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
          DataPtr = (uint8_t*) StringLangID;                                    //
 8000b90:	4b6a      	ldr	r3, [pc, #424]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000b92:	4a6e      	ldr	r2, [pc, #440]	@ (8000d4c <USB_HandleEP0_Process+0x270>)
 8000b94:	671a      	str	r2, [r3, #112]	@ 0x70
          DataCount = StringLangID[0];                                          //
 8000b96:	2204      	movs	r2, #4
 8000b98:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          return USB_ACK;                                                       //
 8000b9c:	2401      	movs	r4, #1
 8000b9e:	e7b3      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
          DataPtr = (uint8_t*) StringVendor;                                    //
 8000ba0:	4b66      	ldr	r3, [pc, #408]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000ba2:	4a6b      	ldr	r2, [pc, #428]	@ (8000d50 <USB_HandleEP0_Process+0x274>)
 8000ba4:	671a      	str	r2, [r3, #112]	@ 0x70
          DataCount = StringVendor[0];                                          //
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          return USB_ACK;                                                       //
 8000bac:	2401      	movs	r4, #1
 8000bae:	e7ab      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
          DataPtr = (uint8_t*) StringProduct;                                   //
 8000bb0:	4b62      	ldr	r3, [pc, #392]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000bb2:	4a68      	ldr	r2, [pc, #416]	@ (8000d54 <USB_HandleEP0_Process+0x278>)
 8000bb4:	671a      	str	r2, [r3, #112]	@ 0x70
          DataCount = StringProduct[0];                                         //
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          return USB_ACK;                                                       //
 8000bbc:	2401      	movs	r4, #1
 8000bbe:	e7a3      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
        DataPtr = (uint8_t*)USB_Descriptor;                                     //
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000bc2:	4a65      	ldr	r2, [pc, #404]	@ (8000d58 <USB_HandleEP0_Process+0x27c>)
 8000bc4:	671a      	str	r2, [r3, #112]	@ 0x70
        DataCount = USB_Descriptor[0];                                          //
 8000bc6:	2212      	movs	r2, #18
 8000bc8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        return USB_ACK;                                                         //
 8000bcc:	2401      	movs	r4, #1
 8000bce:	e79b      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      if(CtrReq.Value != 1) {                                                   //
 8000bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000bd2:	885b      	ldrh	r3, [r3, #2]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d021      	beq.n	8000c1c <USB_HandleEP0_Process+0x140>
        for(uint8_t i = 1; i < 8; i++) USB_DeconfigEP(i);                       //Deconfigure device
 8000bd8:	2401      	movs	r4, #1
 8000bda:	e004      	b.n	8000be6 <USB_HandleEP0_Process+0x10a>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f7ff ff65 	bl	8000aac <USB_DeconfigEP>
 8000be2:	3401      	adds	r4, #1
 8000be4:	b2e4      	uxtb	r4, r4
 8000be6:	2c07      	cmp	r4, #7
 8000be8:	d9f8      	bls.n	8000bdc <USB_HandleEP0_Process+0x100>
        for(uint8_t i = 1; i < 8; i++) USB_RegisterEP(i, NULL);                 //
 8000bea:	2401      	movs	r4, #1
 8000bec:	e005      	b.n	8000bfa <USB_HandleEP0_Process+0x11e>
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff fd45 	bl	8000680 <USB_RegisterEP>
 8000bf6:	3401      	adds	r4, #1
 8000bf8:	b2e4      	uxtb	r4, r4
 8000bfa:	2c07      	cmp	r4, #7
 8000bfc:	d9f7      	bls.n	8000bee <USB_HandleEP0_Process+0x112>
        State.Device = USB_STATE_ADDRESSED;                                     //
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c00:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000c04:	2401      	movs	r4, #1
 8000c06:	f364 1287 	bfi	r2, r4, #6, #2
 8000c0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        State.Config = CtrReq.Value & 0x07;                                     //
 8000c0e:	8859      	ldrh	r1, [r3, #2]
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	f361 0202 	bfi	r2, r1, #0, #3
 8000c16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        return USB_ACK;                                                         //
 8000c1a:	e775      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
        USB_ConfigEP(0x81, USB_EPTYPE_BULK | USB_EPTYPE_DBLBUF, 64);            //Configure device
 8000c1c:	2240      	movs	r2, #64	@ 0x40
 8000c1e:	2106      	movs	r1, #6
 8000c20:	2081      	movs	r0, #129	@ 0x81
 8000c22:	f7ff fe92 	bl	800094a <USB_ConfigEP>
        USB_RegisterEP(0x81, USB_HandleEP1_TX);                                 //
 8000c26:	494d      	ldr	r1, [pc, #308]	@ (8000d5c <USB_HandleEP0_Process+0x280>)
 8000c28:	2081      	movs	r0, #129	@ 0x81
 8000c2a:	f7ff fd29 	bl	8000680 <USB_RegisterEP>
        State.Device = USB_STATE_CONFIGURED;                                    //
 8000c2e:	4b43      	ldr	r3, [pc, #268]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c30:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000c34:	2102      	movs	r1, #2
 8000c36:	f361 1287 	bfi	r2, r1, #6, #2
 8000c3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        State.Config = CtrReq.Value & 0x07;                                     //
 8000c3e:	8859      	ldrh	r1, [r3, #2]
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	f361 0202 	bfi	r2, r1, #0, #3
 8000c46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        return USB_ACK;                                                         //
 8000c4a:	2401      	movs	r4, #1
 8000c4c:	e75c      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
  } else if(Type == (USB_REQ_STANDARD | USB_REQ_INTERFACE)) {                   //
 8000c4e:	2c01      	cmp	r4, #1
 8000c50:	d005      	beq.n	8000c5e <USB_HandleEP0_Process+0x182>
  } else if(Type == (USB_REQ_STANDARD | USB_REQ_ENDPOINT)) {                    //
 8000c52:	2c02      	cmp	r4, #2
 8000c54:	d00d      	beq.n	8000c72 <USB_HandleEP0_Process+0x196>
  } else if(Type == (USB_REQ_VENDOR | USB_REQ_DEVICE)) {                        //openZmeter control request
 8000c56:	2c40      	cmp	r4, #64	@ 0x40
 8000c58:	d049      	beq.n	8000cee <USB_HandleEP0_Process+0x212>
  return USB_FAIL;                                                              //
 8000c5a:	2400      	movs	r4, #0
 8000c5c:	e754      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
    if(CtrReq.Request == USB_STD_GET_STATUS) {                                  //Standard-Interface-GetStatus
 8000c5e:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	b10b      	cbz	r3, 8000c68 <USB_HandleEP0_Process+0x18c>
  return USB_FAIL;                                                              //
 8000c64:	2400      	movs	r4, #0
 8000c66:	e74f      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      CtrReq.Data[0] = 0;                                                       //
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	721a      	strb	r2, [r3, #8]
      CtrReq.Data[1] = 0;                                                       //
 8000c6e:	725a      	strb	r2, [r3, #9]
      return USB_ACK;                                                           //
 8000c70:	e74a      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
    if(CtrReq.Request == USB_STD_SET_FEATURE) {                                 //Standard-Endpoint-SetFeature
 8000c72:	4b32      	ldr	r3, [pc, #200]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c74:	785c      	ldrb	r4, [r3, #1]
 8000c76:	2c03      	cmp	r4, #3
 8000c78:	d004      	beq.n	8000c84 <USB_HandleEP0_Process+0x1a8>
    } else if(CtrReq.Request == USB_STD_CLEAR_FEATURE) {                        //Standard-Endpoint-ClearFeature
 8000c7a:	2c01      	cmp	r4, #1
 8000c7c:	d008      	beq.n	8000c90 <USB_HandleEP0_Process+0x1b4>
    } else if(CtrReq.Request == USB_STD_GET_STATUS) {                           //Standard-Endpoint-GetStatus
 8000c7e:	b16c      	cbz	r4, 8000c9c <USB_HandleEP0_Process+0x1c0>
  return USB_FAIL;                                                              //
 8000c80:	2400      	movs	r4, #0
 8000c82:	e741      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      USB_StallEP(CtrReq.Index, 1);                                             //
 8000c84:	2101      	movs	r1, #1
 8000c86:	7918      	ldrb	r0, [r3, #4]
 8000c88:	f7ff fc99 	bl	80005be <USB_StallEP>
      return USB_ACK;                                                           //
 8000c8c:	2401      	movs	r4, #1
 8000c8e:	e73b      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      USB_StallEP(CtrReq.Index, 0);                                             //
 8000c90:	2100      	movs	r1, #0
 8000c92:	4b2a      	ldr	r3, [pc, #168]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c94:	7918      	ldrb	r0, [r3, #4]
 8000c96:	f7ff fc92 	bl	80005be <USB_StallEP>
      return USB_ACK;                                                           //
 8000c9a:	e735      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      CtrReq.Data[0] = 0;                                                       //
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	721a      	strb	r2, [r3, #8]
      if(CtrReq.Index & USB_EPDIR_OUT) {                                        //
 8000ca2:	889b      	ldrh	r3, [r3, #4]
 8000ca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000ca8:	d012      	beq.n	8000cd0 <USB_HandleEP0_Process+0x1f4>
        if(USB_EPTX_STAT & EPR[CtrReq.Index & 0x07]) CtrReq.Data[0] = 1;        //
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cb4:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f013 0f30 	tst.w	r3, #48	@ 0x30
 8000cbe:	d002      	beq.n	8000cc6 <USB_HandleEP0_Process+0x1ea>
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	721a      	strb	r2, [r3, #8]
      CtrReq.Data[1] = 0;                                                       //
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	725a      	strb	r2, [r3, #9]
      return USB_ACK;                                                           //
 8000ccc:	2401      	movs	r4, #1
 8000cce:	e71b      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
        if(USB_EPRX_STAT & EPR[CtrReq.Index & 0x07]) CtrReq.Data[0] = 1;        //
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cda:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
 8000ce4:	d0ef      	beq.n	8000cc6 <USB_HandleEP0_Process+0x1ea>
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	721a      	strb	r2, [r3, #8]
 8000cec:	e7eb      	b.n	8000cc6 <USB_HandleEP0_Process+0x1ea>
    if(CtrReq.Request == 0x20) {                                                //Implemented commands
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	2b20      	cmp	r3, #32
 8000cf4:	d007      	beq.n	8000d06 <USB_HandleEP0_Process+0x22a>
    } else if(CtrReq.Request == 0x21) {                                         //Set pre/post delay for relay
 8000cf6:	2b21      	cmp	r3, #33	@ 0x21
 8000cf8:	d00b      	beq.n	8000d12 <USB_HandleEP0_Process+0x236>
    } else if(CtrReq.Request == 0x22) {                                         //Set number of samples per scan
 8000cfa:	2b22      	cmp	r3, #34	@ 0x22
 8000cfc:	d00f      	beq.n	8000d1e <USB_HandleEP0_Process+0x242>
    } else if(CtrReq.Request == 0x23) {                                         //Start capture
 8000cfe:	2b23      	cmp	r3, #35	@ 0x23
 8000d00:	d015      	beq.n	8000d2e <USB_HandleEP0_Process+0x252>
      return USB_FAIL;                                                          //If command not implemented
 8000d02:	2400      	movs	r4, #0
 8000d04:	e700      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
      SetTimes(CtrReq.Index, CtrReq.Value);                                     //Set time for pulse/recovery
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000d08:	8859      	ldrh	r1, [r3, #2]
 8000d0a:	8898      	ldrh	r0, [r3, #4]
 8000d0c:	f7ff fb68 	bl	80003e0 <SetTimes>
 8000d10:	e011      	b.n	8000d36 <USB_HandleEP0_Process+0x25a>
      SetDelays(CtrReq.Index, CtrReq.Value);                                    //
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000d14:	8859      	ldrh	r1, [r3, #2]
 8000d16:	8898      	ldrh	r0, [r3, #4]
 8000d18:	f7ff fb6c 	bl	80003f4 <SetDelays>
 8000d1c:	e00b      	b.n	8000d36 <USB_HandleEP0_Process+0x25a>
      SetSamples(((uint32_t)CtrReq.Index << 16) | CtrReq.Value);           //
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000d20:	8898      	ldrh	r0, [r3, #4]
 8000d22:	885b      	ldrh	r3, [r3, #2]
 8000d24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d28:	f7ff fb6e 	bl	8000408 <SetSamples>
 8000d2c:	e003      	b.n	8000d36 <USB_HandleEP0_Process+0x25a>
      Capture(CtrReq.Value);                                                    //
 8000d2e:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <USB_HandleEP0_Process+0x260>)
 8000d30:	8858      	ldrh	r0, [r3, #2]
 8000d32:	f7ff fb73 	bl	800041c <Capture>
    return USB_ACK;                                                             //
 8000d36:	2401      	movs	r4, #1
 8000d38:	e6e6      	b.n	8000b08 <USB_HandleEP0_Process+0x2c>
 8000d3a:	bf00      	nop
 8000d3c:	200040a0 	.word	0x200040a0
 8000d40:	080004f9 	.word	0x080004f9
 8000d44:	08001304 	.word	0x08001304
 8000d48:	1ffff000 	.word	0x1ffff000
 8000d4c:	080012c0 	.word	0x080012c0
 8000d50:	080012c4 	.word	0x080012c4
 8000d54:	080012d0 	.word	0x080012d0
 8000d58:	080012f0 	.word	0x080012f0
 8000d5c:	08000525 	.word	0x08000525

08000d60 <USB_StallEP0>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_StallEP0() {                                                           //Stall EP0
 8000d60:	b508      	push	{r3, lr}
  USB_StallEP(0x00, 1);                                                         //
 8000d62:	2101      	movs	r1, #1
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fc2a 	bl	80005be <USB_StallEP>
  USB_StallEP(0x80, 1);                                                         //
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2080      	movs	r0, #128	@ 0x80
 8000d6e:	f7ff fc26 	bl	80005be <USB_StallEP>
  State.Control = USB_CONTROL_IDLE;                                             //
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <USB_StallEP0+0x24>)
 8000d74:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000d78:	f36f 02c5 	bfc	r2, #3, #3
 8000d7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}                                                                               //
 8000d80:	bd08      	pop	{r3, pc}
 8000d82:	bf00      	nop
 8000d84:	200040a0 	.word	0x200040a0

08000d88 <USB_HandleEP0_TX>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_HandleEP0_TX() {                                                       //Handle TX control transfers
  int16_t Write = 0;                                                            //
  switch(State.Control) {                                                       //
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <USB_HandleEP0_TX+0x98>)
 8000d8a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000d8e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d03a      	beq.n	8000e0c <USB_HandleEP0_TX+0x84>
void USB_HandleEP0_TX() {                                                       //Handle TX control transfers
 8000d96:	b570      	push	{r4, r5, r6, lr}
  switch(State.Control) {                                                       //
 8000d98:	d82b      	bhi.n	8000df2 <USB_HandleEP0_TX+0x6a>
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d832      	bhi.n	8000e0a <USB_HandleEP0_TX+0x82>
    case USB_CONTROL_TXPAYLOAD:                                                 //
    case USB_CONTROL_TXDATA:                                                    //
      Write = (DataCount < sizeof(CtrReq.Data)) ? DataCount:sizeof(CtrReq.Data);//
 8000da4:	4c1e      	ldr	r4, [pc, #120]	@ (8000e20 <USB_HandleEP0_TX+0x98>)
 8000da6:	f894 6074 	ldrb.w	r6, [r4, #116]	@ 0x74
 8000daa:	4635      	mov	r5, r6
 8000dac:	2e40      	cmp	r6, #64	@ 0x40
 8000dae:	bf28      	it	cs
 8000db0:	2540      	movcs	r5, #64	@ 0x40
      USB_WriteEP(0, DataPtr, Write);                                           //
 8000db2:	462a      	mov	r2, r5
 8000db4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff fcbf 	bl	800073a <USB_WriteEP>
      DataPtr += Write;                                                         //
 8000dbc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8000dbe:	442b      	add	r3, r5
 8000dc0:	6723      	str	r3, [r4, #112]	@ 0x70
      DataCount -= Write;                                                       //
 8000dc2:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8000dc6:	1b5b      	subs	r3, r3, r5
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
      if(DataCount != 0) return;                                                //if all data is not sent
 8000dce:	b9e3      	cbnz	r3, 8000e0a <USB_HandleEP0_TX+0x82>
      if((State.Control == USB_CONTROL_TXDATA)||(sizeof(CtrReq.Data) != Write)){//If no ZLP needed
 8000dd0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8000dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000dd8:	2b10      	cmp	r3, #16
 8000dda:	d001      	beq.n	8000de0 <USB_HandleEP0_TX+0x58>
 8000ddc:	2e3f      	cmp	r6, #63	@ 0x3f
 8000dde:	d814      	bhi.n	8000e0a <USB_HandleEP0_TX+0x82>
        State.Control = USB_CONTROL_LASTDATA;                                   //
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <USB_HandleEP0_TX+0x98>)
 8000de2:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000de6:	2104      	movs	r1, #4
 8000de8:	f361 02c5 	bfi	r2, r1, #3, #3
 8000dec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000df0:	e00b      	b.n	8000e0a <USB_HandleEP0_TX+0x82>
  switch(State.Control) {                                                       //
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d109      	bne.n	8000e0a <USB_HandleEP0_TX+0x82>
      return;                                                                   //
    case USB_CONTROL_LASTDATA:                                                  //On ZLP needed do nothing
      State.Control = USB_CONTROL_STATUSOUT;                                    //
      return;                                                                   //
    case USB_CONTROL_STATUSIN:                                                  //Terminate transaction
      State.Control = USB_CONTROL_IDLE;                                         //
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <USB_HandleEP0_TX+0x98>)
 8000df8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000dfc:	f36f 02c5 	bfc	r2, #3, #3
 8000e00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      if(OnComplete) OnComplete();                                              //Call complete callback
 8000e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000e06:	b103      	cbz	r3, 8000e0a <USB_HandleEP0_TX+0x82>
 8000e08:	4798      	blx	r3
      return;                                                                   //
  }                                                                             //
}                                                                               //
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
      State.Control = USB_CONTROL_STATUSOUT;                                    //
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <USB_HandleEP0_TX+0x98>)
 8000e0e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000e12:	2106      	movs	r1, #6
 8000e14:	f361 02c5 	bfi	r2, r1, #3, #3
 8000e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      return;                                                                   //
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200040a0 	.word	0x200040a0

08000e24 <USB_HandleEP0_RX>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_HandleEP0_RX() {                                                       //Handle RX control transfers
 8000e24:	b510      	push	{r4, lr}
  uint16_t Read = 0;                                                            //
  switch(State.Control) {                                                       //
 8000e26:	4b52      	ldr	r3, [pc, #328]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000e28:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000e2c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d02b      	beq.n	8000e8c <USB_HandleEP0_RX+0x68>
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d042      	beq.n	8000ebe <USB_HandleEP0_RX+0x9a>
 8000e38:	b113      	cbz	r3, 8000e40 <USB_HandleEP0_RX+0x1c>
      USB_ReadEP(0, 0, 0);                                                      //
      State.Control = USB_CONTROL_IDLE;                                         //
      if(OnComplete) OnComplete();                                              //Call complete callback
      return;                                                                   //
    default  :                                                                  //unexpected RX packet
      return USB_StallEP0();                                                    //
 8000e3a:	f7ff ff91 	bl	8000d60 <USB_StallEP0>
      State.Control = USB_CONTROL_STATUSIN;                                     //
      break;                                                                    //
    default :                                                                   //
      return USB_StallEP0();                                                    //
  }                                                                             //
}                                                                               //
 8000e3e:	bd10      	pop	{r4, pc}
      if(USB_ReadEP(0, (uint8_t*)&CtrReq, sizeof(CtrReq.Data)) != 0x08) {       //Stall if incorrect packet length
 8000e40:	2240      	movs	r2, #64	@ 0x40
 8000e42:	494b      	ldr	r1, [pc, #300]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fce5 	bl	8000814 <USB_ReadEP>
 8000e4a:	2808      	cmp	r0, #8
 8000e4c:	d117      	bne.n	8000e7e <USB_HandleEP0_RX+0x5a>
      DataPtr = CtrReq.Data;                                                    //Init reception pointer
 8000e4e:	4b48      	ldr	r3, [pc, #288]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000e50:	f103 0208 	add.w	r2, r3, #8
 8000e54:	671a      	str	r2, [r3, #112]	@ 0x70
      DataCount = CtrReq.Length;                                                //
 8000e56:	88da      	ldrh	r2, [r3, #6]
 8000e58:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      if((CtrReq.Type & USB_REQ_DEVTOHOST) || (CtrReq.Length == 0)) break;      //if no payload data
 8000e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db3d      	blt.n	8000ee0 <USB_HandleEP0_RX+0xbc>
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	d03b      	beq.n	8000ee0 <USB_HandleEP0_RX+0xbc>
      if(CtrReq.Length > sizeof(CtrReq.Data)) return USB_StallEP0(0);           //check available memory for DATA OUT
 8000e68:	2a40      	cmp	r2, #64	@ 0x40
 8000e6a:	d80b      	bhi.n	8000e84 <USB_HandleEP0_RX+0x60>
      State.Control = USB_CONTROL_RXDATA;                                       //continue DATA OUT stage
 8000e6c:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000e6e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000e72:	2101      	movs	r1, #1
 8000e74:	f361 02c5 	bfi	r2, r1, #3, #3
 8000e78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      return;                                                                   //
 8000e7c:	e7df      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
        USB_StallEP0();                                                         //
 8000e7e:	f7ff ff6f 	bl	8000d60 <USB_StallEP0>
        return;                                                                 //
 8000e82:	e7dc      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
      if(CtrReq.Length > sizeof(CtrReq.Data)) return USB_StallEP0(0);           //check available memory for DATA OUT
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff6b 	bl	8000d60 <USB_StallEP0>
 8000e8a:	e7d8      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
      Read = USB_ReadEP(0, DataPtr, DataCount);                                 //Get received data
 8000e8c:	4c38      	ldr	r4, [pc, #224]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000e8e:	f894 2074 	ldrb.w	r2, [r4, #116]	@ 0x74
 8000e92:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff fcbd 	bl	8000814 <USB_ReadEP>
 8000e9a:	b282      	uxth	r2, r0
      if(Read > DataCount) {                                                    //If more data than expected
 8000e9c:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d309      	bcc.n	8000eb8 <USB_HandleEP0_RX+0x94>
      } else if(DataCount != Read) {                                            //if all data payload was not received yet
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d01b      	beq.n	8000ee0 <USB_HandleEP0_RX+0xbc>
        DataCount -= Read;                                                      //
 8000ea8:	4931      	ldr	r1, [pc, #196]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000eaa:	1a1b      	subs	r3, r3, r0
 8000eac:	f881 3074 	strb.w	r3, [r1, #116]	@ 0x74
        DataPtr += Read;                                                        //
 8000eb0:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8000eb2:	4413      	add	r3, r2
 8000eb4:	670b      	str	r3, [r1, #112]	@ 0x70
        return;                                                                 //
 8000eb6:	e7c2      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
        return USB_StallEP0();                                                  //
 8000eb8:	f7ff ff52 	bl	8000d60 <USB_StallEP0>
 8000ebc:	e7bf      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
      USB_ReadEP(0, 0, 0);                                                      //
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	f7ff fca6 	bl	8000814 <USB_ReadEP>
      State.Control = USB_CONTROL_IDLE;                                         //
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000eca:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000ece:	f36f 02c5 	bfc	r2, #3, #3
 8000ed2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      if(OnComplete) OnComplete();                                              //Call complete callback
 8000ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0b0      	beq.n	8000e3e <USB_HandleEP0_RX+0x1a>
 8000edc:	4798      	blx	r3
 8000ede:	e7ae      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
  DataPtr = CtrReq.Data;                                                        //Handle received data
 8000ee0:	4b23      	ldr	r3, [pc, #140]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000ee2:	f103 0208 	add.w	r2, r3, #8
 8000ee6:	671a      	str	r2, [r3, #112]	@ 0x70
  DataCount = sizeof(CtrReq.Data);                                              //
 8000ee8:	2240      	movs	r2, #64	@ 0x40
 8000eea:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  switch(USB_HandleEP0_Process()) {                                             //
 8000eee:	f7ff fdf5 	bl	8000adc <USB_HandleEP0_Process>
 8000ef2:	2801      	cmp	r0, #1
 8000ef4:	d004      	beq.n	8000f00 <USB_HandleEP0_RX+0xdc>
 8000ef6:	2802      	cmp	r0, #2
 8000ef8:	d031      	beq.n	8000f5e <USB_HandleEP0_RX+0x13a>
      return USB_StallEP0();                                                    //
 8000efa:	f7ff ff31 	bl	8000d60 <USB_StallEP0>
 8000efe:	e79e      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
      if(CtrReq.Type & USB_REQ_DEVTOHOST) {                                     //
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000f02:	f993 3000 	ldrsb.w	r3, [r3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da1b      	bge.n	8000f42 <USB_HandleEP0_RX+0x11e>
        if(DataCount >= CtrReq.Length) {                                        //return data from function
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000f0c:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8000f10:	88db      	ldrh	r3, [r3, #6]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d30c      	bcc.n	8000f30 <USB_HandleEP0_RX+0x10c>
          DataCount = CtrReq.Length;                                            //
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000f18:	f882 3074 	strb.w	r3, [r2, #116]	@ 0x74
          State.Control = USB_CONTROL_TXDATA;                                   //
 8000f1c:	f892 3048 	ldrb.w	r3, [r2, #72]	@ 0x48
 8000f20:	2102      	movs	r1, #2
 8000f22:	f361 03c5 	bfi	r3, r1, #3, #3
 8000f26:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
        USB_HandleEP0_TX();                                                     //
 8000f2a:	f7ff ff2d 	bl	8000d88 <USB_HandleEP0_TX>
 8000f2e:	e786      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
          State.Control = USB_CONTROL_TXPAYLOAD;                                //
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000f32:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000f36:	2103      	movs	r1, #3
 8000f38:	f361 02c5 	bfi	r2, r1, #3, #3
 8000f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000f40:	e7f3      	b.n	8000f2a <USB_HandleEP0_RX+0x106>
        USB_WriteEP(0x80, 0, 0);                                                //confirming by ZLP in STATUS_IN stage
 8000f42:	2200      	movs	r2, #0
 8000f44:	4611      	mov	r1, r2
 8000f46:	2080      	movs	r0, #128	@ 0x80
 8000f48:	f7ff fbf7 	bl	800073a <USB_WriteEP>
        State.Control = USB_CONTROL_STATUSIN;                                   //
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000f4e:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000f52:	2105      	movs	r1, #5
 8000f54:	f361 02c5 	bfi	r2, r1, #3, #3
 8000f58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8000f5c:	e76f      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
      State.Control = USB_CONTROL_STATUSIN;                                     //
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <USB_HandleEP0_RX+0x14c>)
 8000f60:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000f64:	2105      	movs	r1, #5
 8000f66:	f361 02c5 	bfi	r2, r1, #3, #3
 8000f6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      break;                                                                    //
 8000f6e:	e766      	b.n	8000e3e <USB_HandleEP0_RX+0x1a>
 8000f70:	200040a0 	.word	0x200040a0

08000f74 <USB_HandleEP0>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_HandleEP0(const uint8_t evt) {                                         //Handle EP0 CONTROL transfers
 8000f74:	b508      	push	{r3, lr}
  if(evt == USB_EVENT_TX) {                                                     //
 8000f76:	b120      	cbz	r0, 8000f82 <USB_HandleEP0+0xe>
    USB_HandleEP0_TX();                                                         //
  } else {                                                                      //
    if(evt == USB_EVENT_SETUP) {                                                //
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d005      	beq.n	8000f88 <USB_HandleEP0+0x14>
      State.Control = USB_CONTROL_IDLE;                                         //
      OnComplete = NULL;                                                        //
    }                                                                           //
    USB_HandleEP0_RX();                                                         //
 8000f7c:	f7ff ff52 	bl	8000e24 <USB_HandleEP0_RX>
  }                                                                             //
}                                                                               //
 8000f80:	bd08      	pop	{r3, pc}
    USB_HandleEP0_TX();                                                         //
 8000f82:	f7ff ff01 	bl	8000d88 <USB_HandleEP0_TX>
 8000f86:	e7fb      	b.n	8000f80 <USB_HandleEP0+0xc>
      State.Control = USB_CONTROL_IDLE;                                         //
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <USB_HandleEP0+0x28>)
 8000f8a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8000f8e:	f36f 02c5 	bfc	r2, #3, #3
 8000f92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      OnComplete = NULL;                                                        //
 8000f96:	2200      	movs	r2, #0
 8000f98:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f9a:	e7ef      	b.n	8000f7c <USB_HandleEP0+0x8>
 8000f9c:	200040a0 	.word	0x200040a0

08000fa0 <USB_LP_ISR>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_LP_ISR() {                                                             //USB interrupt handler
 8000fa0:	b510      	push	{r4, lr}
  if(USB->ISTR & USB_ISTR_CTR) {                                                //Manage correct transfer complete
 8000fa2:	4b57      	ldr	r3, [pc, #348]	@ (8001100 <USB_LP_ISR+0x160>)
 8000fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fa8:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8000fac:	d112      	bne.n	8000fd4 <USB_LP_ISR+0x34>
      EPR[EP] &= (USB_EPREG_MASK ^ USB_EP_CTR_RX);                              //
      if(Endpoint[EP]) {                                                        //
        Endpoint[EP]((EPR[EP] & USB_EP_SETUP) ? USB_EVENT_SETUP : USB_EVENT_RX);//
      }                                                                         //
    }                                                                           //
  } else if(USB->ISTR & USB_ISTR_RESET) {                                       //Manage bus reset
 8000fae:	4b54      	ldr	r3, [pc, #336]	@ (8001100 <USB_LP_ISR+0x160>)
 8000fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000fb4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8000fb8:	d063      	beq.n	8001082 <USB_LP_ISR+0xe2>
    USB->ISTR &= ~USB_ISTR_RESET;                                               //
 8000fba:	4a51      	ldr	r2, [pc, #324]	@ (8001100 <USB_LP_ISR+0x160>)
 8000fbc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    USB->BTABLE = 0;                                                            //
 8000fcc:	2400      	movs	r4, #0
 8000fce:	f8a2 4050 	strh.w	r4, [r2, #80]	@ 0x50
    for(uint8_t i = 0; i < 8; i++) USB_DeconfigEP(i);                           //
 8000fd2:	e037      	b.n	8001044 <USB_LP_ISR+0xa4>
    uint8_t EP = USB->ISTR & 0x07;                                              //
 8000fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001100 <USB_LP_ISR+0x160>)
 8000fd6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8000fda:	f002 0207 	and.w	r2, r2, #7
    if(EPR[EP] & USB_EP_CTR_TX) {                                               //
 8000fde:	0093      	lsls	r3, r2, #2
 8000fe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000fe4:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8000fe8:	6819      	ldr	r1, [r3, #0]
 8000fea:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8000fee:	d010      	beq.n	8001012 <USB_LP_ISR+0x72>
      EPR[EP] &= (USB_EPREG_MASK ^ USB_EP_CTR_TX);                              //
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	f421 41e1 	bic.w	r1, r1, #28800	@ 0x7080
 8000ff6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8000ffa:	0409      	lsls	r1, r1, #16
 8000ffc:	0c09      	lsrs	r1, r1, #16
 8000ffe:	6019      	str	r1, [r3, #0]
      if(Endpoint[EP]) Endpoint[EP](USB_EVENT_TX);                              //
 8001000:	4b40      	ldr	r3, [pc, #256]	@ (8001104 <USB_LP_ISR+0x164>)
 8001002:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	2b00      	cmp	r3, #0
 800100a:	d039      	beq.n	8001080 <USB_LP_ISR+0xe0>
 800100c:	2000      	movs	r0, #0
 800100e:	4798      	blx	r3
 8001010:	e036      	b.n	8001080 <USB_LP_ISR+0xe0>
      EPR[EP] &= (USB_EPREG_MASK ^ USB_EP_CTR_RX);                              //
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8001018:	0509      	lsls	r1, r1, #20
 800101a:	0d09      	lsrs	r1, r1, #20
 800101c:	6019      	str	r1, [r3, #0]
      if(Endpoint[EP]) {                                                        //
 800101e:	4939      	ldr	r1, [pc, #228]	@ (8001104 <USB_LP_ISR+0x164>)
 8001020:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001024:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001026:	b35a      	cbz	r2, 8001080 <USB_LP_ISR+0xe0>
        Endpoint[EP]((EPR[EP] & USB_EP_SETUP) ? USB_EVENT_SETUP : USB_EVENT_RX);//
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800102e:	d002      	beq.n	8001036 <USB_LP_ISR+0x96>
 8001030:	2002      	movs	r0, #2
 8001032:	4790      	blx	r2
 8001034:	e024      	b.n	8001080 <USB_LP_ISR+0xe0>
 8001036:	2001      	movs	r0, #1
 8001038:	e7fb      	b.n	8001032 <USB_LP_ISR+0x92>
    for(uint8_t i = 0; i < 8; i++) USB_DeconfigEP(i);                           //
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fd36 	bl	8000aac <USB_DeconfigEP>
 8001040:	3401      	adds	r4, #1
 8001042:	b2e4      	uxtb	r4, r4
 8001044:	2c07      	cmp	r4, #7
 8001046:	d9f8      	bls.n	800103a <USB_LP_ISR+0x9a>
    State.Device = USB_STATE_DEFAULT;                                           //
 8001048:	4c2e      	ldr	r4, [pc, #184]	@ (8001104 <USB_LP_ISR+0x164>)
 800104a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800104e:	f36f 1387 	bfc	r3, #6, #2
 8001052:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    State.Control = USB_CONTROL_IDLE;                                           //
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f36f 03c5 	bfc	r3, #3, #3
 800105c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    State.Config = 0;                                                           //
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f36f 0302 	bfc	r3, #0, #3
 8001066:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    USB_ConfigEP(0, USB_EPTYPE_CONTROL, sizeof(CtrReq.Data));                   //
 800106a:	2240      	movs	r2, #64	@ 0x40
 800106c:	2100      	movs	r1, #0
 800106e:	4608      	mov	r0, r1
 8001070:	f7ff fc6b 	bl	800094a <USB_ConfigEP>
    Endpoint[0] = USB_HandleEP0;                                                //
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <USB_LP_ISR+0x168>)
 8001076:	64e3      	str	r3, [r4, #76]	@ 0x4c
    USB->DADDR = USB_DADDR_EF;                                                  //
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <USB_LP_ISR+0x160>)
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    USB->CNTR |= USB_CNTR_FSUSP;                                                //
    USB->ISTR &= ~USB_ISTR_SUSP;                                                //
  } else if (USB->ISTR & USB_ISTR_ERR) {                                        //Manage bus error
    USB->ISTR &= ~USB_ISTR_ERR;                                                 //
  }                                                                             //
}                                                                               //
 8001080:	bd10      	pop	{r4, pc}
  } else if(USB->ISTR & USB_ISTR_WKUP) {                                        //Manage bus wake up
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <USB_LP_ISR+0x160>)
 8001084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001088:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800108c:	d011      	beq.n	80010b2 <USB_LP_ISR+0x112>
    USB->CNTR &= ~USB_CNTR_FSUSP;                                               //
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <USB_LP_ISR+0x160>)
 8001090:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001094:	b29b      	uxth	r3, r3
 8001096:	f023 0308 	bic.w	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    USB->ISTR &= ~USB_ISTR_WKUP;                                                //
 80010a0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
 80010b0:	e7e6      	b.n	8001080 <USB_LP_ISR+0xe0>
  } else if (USB->ISTR & USB_ISTR_SUSP) {                                       //Manage bus suspend
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <USB_LP_ISR+0x160>)
 80010b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010b8:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80010bc:	d010      	beq.n	80010e0 <USB_LP_ISR+0x140>
    USB->CNTR |= USB_CNTR_FSUSP;                                                //
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <USB_LP_ISR+0x160>)
 80010c0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    USB->ISTR &= ~USB_ISTR_SUSP;                                                //
 80010ce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
 80010de:	e7cf      	b.n	8001080 <USB_LP_ISR+0xe0>
  } else if (USB->ISTR & USB_ISTR_ERR) {                                        //Manage bus error
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <USB_LP_ISR+0x160>)
 80010e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010e6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80010ea:	d0c9      	beq.n	8001080 <USB_LP_ISR+0xe0>
    USB->ISTR &= ~USB_ISTR_ERR;                                                 //
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <USB_LP_ISR+0x160>)
 80010ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}                                                                               //
 80010fe:	e7bf      	b.n	8001080 <USB_LP_ISR+0xe0>
 8001100:	40005c00 	.word	0x40005c00
 8001104:	200040a0 	.word	0x200040a0
 8001108:	08000f75 	.word	0x08000f75

0800110c <USB_Init>:
// ---------------------------------------------------------------------------------------------------------------------
void USB_Init() {                                                               //Init USB port
  RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_USBEN;                        //Enable clock to USB peripheral
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <USB_Init+0x5c>)
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	f042 5284 	orr.w	r2, r2, #276824064	@ 0x10800000
 8001114:	61da      	str	r2, [r3, #28]
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN;                       //
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	f442 22c0 	orr.w	r2, r2, #393216	@ 0x60000
 800111c:	615a      	str	r2, [r3, #20]
  GPIOA->MODER |= (0b10<<GPIO_MODER_MODER11_Pos)|(0b10<<GPIO_MODER_MODER12_Pos);//Configure ports
 800111e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f042 7220 	orr.w	r2, r2, #41943040	@ 0x2800000
 8001128:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER5_0;                                          //Pullup resistor
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <USB_Init+0x60>)
 800112c:	6811      	ldr	r1, [r2, #0]
 800112e:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8001132:	6011      	str	r1, [r2, #0]
  GPIOA->OSPEEDR |= (0b11 << GPIO_OSPEEDER_OSPEEDR11_Pos) |                     //High speed mode
 8001134:	6899      	ldr	r1, [r3, #8]
 8001136:	f041 7170 	orr.w	r1, r1, #62914560	@ 0x3c00000
 800113a:	6099      	str	r1, [r3, #8]
                    (0b11 << GPIO_OSPEEDER_OSPEEDR12_Pos);                      //
  GPIOA->AFR[1] |= (14 << GPIO_AFRH_AFRH3_Pos)|(14 << GPIO_AFRH_AFRH4_Pos);     //Set port PA11 and PA12 to alternate function USB
 800113c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800113e:	f441 216e 	orr.w	r1, r1, #974848	@ 0xee000
 8001142:	6259      	str	r1, [r3, #36]	@ 0x24
  USB->CNTR = USB_CNTR_CTRM | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM | //Enabled interrupts
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <USB_Init+0x64>)
 8001146:	f44f 413c 	mov.w	r1, #48128	@ 0xbc00
 800114a:	f8a3 1040 	strh.w	r1, [r3, #64]	@ 0x40
              USB_CNTR_RESETM;                                                  //
  GPIOB->BSRR = GPIO_BSRR_BS_5;                                                 //Enable resistor
 800114e:	2320      	movs	r3, #32
 8001150:	6193      	str	r3, [r2, #24]
  DataPtr = (uint8_t*)&CtrReq;                                                  //Configure control request buffer
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <USB_Init+0x68>)
 8001154:	671b      	str	r3, [r3, #112]	@ 0x70
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <USB_Init+0x6c>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 234b 	strb.w	r2, [r3, #843]	@ 0x34b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001162:	609a      	str	r2, [r3, #8]
  NVIC_SetPriority(USB_LP_IRQn, 0);                                             //Enable interrupts
  NVIC_EnableIRQ(USB_LP_IRQn);                                                  //
}                                                                               //
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400
 8001170:	40005c00 	.word	0x40005c00
 8001174:	200040a0 	.word	0x200040a0
 8001178:	e000e100 	.word	0xe000e100

0800117c <Default_Handler>:
  __enable_irq();                                                               //Enable interrupts
  Main();                                                                       //Call main
}                                                                               //
// ---------------------------------------------------------------------------------------------------------------------
static void Default_Handler() {                                                 //Default interrupt handler
  __BKPT(0);                                                                    //Break into the debugger
 800117c:	be00      	bkpt	0x0000
}                                                                               //
 800117e:	4770      	bx	lr

08001180 <HardFault_Handler>:
  volatile unsigned long _MMAR = (*((volatile unsigned long *)(0xE000ED34)));   //Check BFARVALID/MMARVALID to see if they are valid values
  __BKPT(0);                                                                    //Break into the debugger
}
// ---------------------------------------------------------------------------------------------------------------------
void HardFault_Handler(void) {
  __asm(  ".syntax unified\n"
 8001180:	2004      	movs	r0, #4
 8001182:	4671      	mov	r1, lr
 8001184:	4208      	tst	r0, r1
 8001186:	d003      	beq.n	8001190 <_MSP>
 8001188:	f3ef 8009 	mrs	r0, PSP
 800118c:	f000 b870 	b.w	8001270 <HardFault_HandlerC>

08001190 <_MSP>:
 8001190:	f3ef 8008 	mrs	r0, MSP
 8001194:	f000 b86c 	b.w	8001270 <HardFault_HandlerC>
          "B      HardFault_HandlerC \n"
          "_MSP: \n"
          "MRS    R0, MSP \n"
          "B      HardFault_HandlerC \n"
          ".syntax divided\n");
}
 8001198:	4770      	bx	lr

0800119a <Sys_Init>:
void Sys_Init() {                                                               //System basic initialization
 800119a:	b508      	push	{r3, lr}
  unsigned len = &DATA_END - &DATA_START;                                       //
 800119c:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <Sys_Init+0xb6>)
 800119e:	492d      	ldr	r1, [pc, #180]	@ (8001254 <Sys_Init+0xba>)
 80011a0:	1ac9      	subs	r1, r1, r3
  unsigned char *src  = &DATA_VALUES;                                           //Init data section
 80011a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001258 <Sys_Init+0xbe>)
  while(len--) *dest++ = *src++;                                                //
 80011a4:	e004      	b.n	80011b0 <Sys_Init+0x16>
 80011a6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80011aa:	f803 1b01 	strb.w	r1, [r3], #1
 80011ae:	4601      	mov	r1, r0
 80011b0:	1e48      	subs	r0, r1, #1
 80011b2:	2900      	cmp	r1, #0
 80011b4:	d1f7      	bne.n	80011a6 <Sys_Init+0xc>
  len = &BSS_END - &BSS_START;                                                  //
 80011b6:	4b29      	ldr	r3, [pc, #164]	@ (800125c <Sys_Init+0xc2>)
 80011b8:	4a29      	ldr	r2, [pc, #164]	@ (8001260 <Sys_Init+0xc6>)
 80011ba:	1ad2      	subs	r2, r2, r3
  while(len--) *dest++ = 0;                                                     //
 80011bc:	e003      	b.n	80011c6 <Sys_Init+0x2c>
 80011be:	2200      	movs	r2, #0
 80011c0:	f803 2b01 	strb.w	r2, [r3], #1
 80011c4:	460a      	mov	r2, r1
 80011c6:	1e51      	subs	r1, r2, #1
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d1f8      	bne.n	80011be <Sys_Init+0x24>
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));                                  //Enable FPU
 80011cc:	4a25      	ldr	r2, [pc, #148]	@ (8001264 <Sys_Init+0xca>)
 80011ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80011d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  FLASH->ACR |= FLASH_ACR_PRFTBE | (0b10 << FLASH_ACR_LATENCY_Pos);             //FLASH prefetch enabled and 2 wait state
 80011da:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <Sys_Init+0xce>)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f043 0312 	orr.w	r3, r3, #18
 80011e2:	6013      	str	r3, [r2, #0]
  RCC->CR |= RCC_CR_HSEON;                                                      //Enable HSE oscillator
 80011e4:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
  while((RCC->CR & RCC_CR_HSERDY) == 0);                                        //Wait for HSE become stable
 80011f0:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <Sys_Init+0xd2>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80011f8:	d0fa      	beq.n	80011f0 <Sys_Init+0x56>
  RCC->CFGR |= RCC_CFGR_PLLMUL9 | RCC_CFGR_PLLSRC | RCC_CFGR_PPRE1_2;           //Setup PLL source, multiplier and prescaler
 80011fa:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <Sys_Init+0xd2>)
 80011fc:	6853      	ldr	r3, [r2, #4]
 80011fe:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8001202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001206:	6053      	str	r3, [r2, #4]
  RCC->CR |= RCC_CR_PLLON;                                                      //Turn on PLL
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800120e:	6013      	str	r3, [r2, #0]
  while((RCC->CR & RCC_CR_PLLRDY) == 0);                                        //Wait for PLL to lock
 8001210:	4b16      	ldr	r3, [pc, #88]	@ (800126c <Sys_Init+0xd2>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001218:	d0fa      	beq.n	8001210 <Sys_Init+0x76>
  RCC->CFGR |= (0b10 << RCC_CFGR_SW_Pos) | RCC_CFGR_SDADCPRE_DIV12;              //Set PLL as system clock
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <Sys_Init+0xd2>)
 800121c:	6853      	ldr	r3, [r2, #4]
 800121e:	f043 4328 	orr.w	r3, r3, #2818572288	@ 0xa8000000
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6053      	str	r3, [r2, #4]
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;                                            //Enable used peripherals in APB1
 8001228:	69d3      	ldr	r3, [r2, #28]
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122e:	61d3      	str	r3, [r2, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <Sys_Init+0xca>)
 8001232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001234:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001244:	60d3      	str	r3, [r2, #12]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001246:	b662      	cpsie	i
  Main();                                                                       //Call main
 8001248:	f7ff f90a 	bl	8000460 <Main>
}                                                                               //
 800124c:	bd08      	pop	{r3, pc}
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000
 8001254:	20000000 	.word	0x20000000
 8001258:	0800131d 	.word	0x0800131d
 800125c:	20000000 	.word	0x20000000
 8001260:	20004115 	.word	0x20004115
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	40022000 	.word	0x40022000
 800126c:	40021000 	.word	0x40021000

08001270 <HardFault_HandlerC>:
__attribute__((used)) void HardFault_HandlerC(unsigned long *hardfault_args) {
 8001270:	b08e      	sub	sp, #56	@ 0x38
  volatile unsigned long stacked_r0  = ((unsigned long)hardfault_args[0]);
 8001272:	6803      	ldr	r3, [r0, #0]
 8001274:	930d      	str	r3, [sp, #52]	@ 0x34
  volatile unsigned long stacked_r1  = ((unsigned long)hardfault_args[1]);
 8001276:	6843      	ldr	r3, [r0, #4]
 8001278:	930c      	str	r3, [sp, #48]	@ 0x30
  volatile unsigned long stacked_r2  = ((unsigned long)hardfault_args[2]);
 800127a:	6883      	ldr	r3, [r0, #8]
 800127c:	930b      	str	r3, [sp, #44]	@ 0x2c
  volatile unsigned long stacked_r3  = ((unsigned long)hardfault_args[3]);
 800127e:	68c3      	ldr	r3, [r0, #12]
 8001280:	930a      	str	r3, [sp, #40]	@ 0x28
  volatile unsigned long stacked_r12 = ((unsigned long)hardfault_args[4]);
 8001282:	6903      	ldr	r3, [r0, #16]
 8001284:	9309      	str	r3, [sp, #36]	@ 0x24
  volatile unsigned long stacked_lr  = ((unsigned long)hardfault_args[5]);
 8001286:	6943      	ldr	r3, [r0, #20]
 8001288:	9308      	str	r3, [sp, #32]
  volatile unsigned long stacked_pc  = ((unsigned long)hardfault_args[6]);
 800128a:	6983      	ldr	r3, [r0, #24]
 800128c:	9307      	str	r3, [sp, #28]
  volatile unsigned long stacked_psr = ((unsigned long)hardfault_args[7]);
 800128e:	69c3      	ldr	r3, [r0, #28]
 8001290:	9306      	str	r3, [sp, #24]
  volatile unsigned long _CFSR = (*((volatile unsigned long *)(0xE000ED28)));   //Configurable Fault Status Register
 8001292:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001296:	f8d3 2d28 	ldr.w	r2, [r3, #3368]	@ 0xd28
 800129a:	9205      	str	r2, [sp, #20]
  volatile unsigned long _HFSR = (*((volatile unsigned long *)(0xE000ED2C)));   //Hard Fault Status Register
 800129c:	f8d3 2d2c 	ldr.w	r2, [r3, #3372]	@ 0xd2c
 80012a0:	9204      	str	r2, [sp, #16]
  volatile unsigned long _DFSR = (*((volatile unsigned long *)(0xE000ED30)));   //Debug Fault Status Register
 80012a2:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 80012a6:	9203      	str	r2, [sp, #12]
  volatile unsigned long _AFSR = (*((volatile unsigned long *)(0xE000ED3C)));   //Auxiliary Fault Status Register
 80012a8:	f8d3 2d3c 	ldr.w	r2, [r3, #3388]	@ 0xd3c
 80012ac:	9202      	str	r2, [sp, #8]
  volatile unsigned long _BFAR = (*((volatile unsigned long *)(0xE000ED38)));   //Read the Fault Address Registers. These may not contain valid values.
 80012ae:	f8d3 2d38 	ldr.w	r2, [r3, #3384]	@ 0xd38
 80012b2:	9201      	str	r2, [sp, #4]
  volatile unsigned long _MMAR = (*((volatile unsigned long *)(0xE000ED34)));   //Check BFARVALID/MMARVALID to see if they are valid values
 80012b4:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 80012b8:	9300      	str	r3, [sp, #0]
  __BKPT(0);                                                                    //Break into the debugger
 80012ba:	be00      	bkpt	0x0000
}
 80012bc:	b00e      	add	sp, #56	@ 0x38
 80012be:	4770      	bx	lr

080012c0 <StringLangID>:
 80012c0:	0304 040a                                   ....

080012c4 <StringVendor>:
 80012c4:	030c 0043 0075 0072 0072 006f               ..C.u.r.r.o.

080012d0 <StringProduct>:
 80012d0:	0320 0045 0061 0072 0074 0068 002d 0046      .E.a.r.t.h.-.F.
 80012e0:	0069 0065 006c 0064 0020 004e 004d 0052     i.e.l.d. .N.M.R.

080012f0 <USB_Descriptor>:
 80012f0:	0112 0200 ffff 40ff 0547 1002 0200 0201     .......@G.......
 8001300:	0103 0000                                   ....

08001304 <USB_ConfigDescriptor>:
 8001304:	0209 0019 0101 c000 0900 0004 0100 ffff     ................
 8001314:	00ff 0507 0281 0040                          ......@..
